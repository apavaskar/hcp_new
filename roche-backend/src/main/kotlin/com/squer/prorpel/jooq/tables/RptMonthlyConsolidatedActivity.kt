/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.RptMonthlyConsolidatedActivityRecord

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class RptMonthlyConsolidatedActivity(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RptMonthlyConsolidatedActivityRecord>?,
    aliased: Table<RptMonthlyConsolidatedActivityRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RptMonthlyConsolidatedActivityRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.rpt_monthly_consolidated_activity</code>
         */
        val RPT_MONTHLY_CONSOLIDATED_ACTIVITY: RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RptMonthlyConsolidatedActivityRecord> = RptMonthlyConsolidatedActivityRecord::class.java

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.location_id</code>.
     */
    val LOCATION_ID: TableField<RptMonthlyConsolidatedActivityRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_doctors</code>.
     */
    val TOTAL_DOCTORS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_doctors_visited</code>.
     */
    val TOTAL_DOCTORS_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_doctors_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classa_visited</code>.
     */
    val TOTAL_CLASSA_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classa_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classb_visited</code>.
     */
    val TOTAL_CLASSB_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classb_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classc_visited</code>.
     */
    val TOTAL_CLASSC_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classc_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.field_days</code>.
     */
    val FIELD_DAYS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("field_days"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.call_average</code>.
     */
    val CALL_AVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("call_average"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classa_call_average</code>.
     */
    val CLASSA_CALL_AVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classa_call_average"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classb_call_average</code>.
     */
    val CLASSB_CALL_AVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classb_call_average"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classc_call_average</code>.
     */
    val CLASSC_CALL_AVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classc_call_average"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.distinct_doctor_visits</code>.
     */
    val DISTINCT_DOCTOR_VISITS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("distinct_doctor_visits"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classa_coverage</code>.
     */
    val CLASSA_COVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classa_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classb_coverage</code>.
     */
    val CLASSB_COVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classb_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classc_coverage</code>.
     */
    val CLASSC_COVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classc_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classa_frequency</code>.
     */
    val CLASSA_FREQUENCY: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classa_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classb_frequency</code>.
     */
    val CLASSB_FREQUENCY: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classb_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.classc_frequency</code>.
     */
    val CLASSC_FREQUENCY: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("classc_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_coverage</code>.
     */
    val TOTAL_COVERAGE: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("total_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.rpt_monthly_consolidated_activity.month</code>.
     */
    val MONTH: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.rpt_monthly_consolidated_activity.year</code>.
     */
    val YEAR: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.yearmonth</code>.
     */
    val YEARMONTH: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("yearmonth"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classa_doctors</code>.
     */
    val TOTAL_CLASSA_DOCTORS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classa_doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classb_doctors</code>.
     */
    val TOTAL_CLASSB_DOCTORS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classb_doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_classc_doctors</code>.
     */
    val TOTAL_CLASSC_DOCTORS: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_classc_doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_distinct_classa_visited</code>.
     */
    val TOTAL_DISTINCT_CLASSA_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_distinct_classa_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_distinct_classb_visited</code>.
     */
    val TOTAL_DISTINCT_CLASSB_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_distinct_classb_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_distinct_classc_visited</code>.
     */
    val TOTAL_DISTINCT_CLASSC_VISITED: TableField<RptMonthlyConsolidatedActivityRecord, Int?> = createField(DSL.name("total_distinct_classc_visited"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.rpt_monthly_consolidated_activity.total_frequency</code>.
     */
    val TOTAL_FREQUENCY: TableField<RptMonthlyConsolidatedActivityRecord, Double?> = createField(DSL.name("total_frequency"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<RptMonthlyConsolidatedActivityRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RptMonthlyConsolidatedActivityRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.rpt_monthly_consolidated_activity</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.rpt_monthly_consolidated_activity</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.rpt_monthly_consolidated_activity</code> table
     * reference
     */
    constructor(): this(DSL.name("rpt_monthly_consolidated_activity"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RptMonthlyConsolidatedActivityRecord>): this(Internal.createPathAlias(child, key), child, key, RPT_MONTHLY_CONSOLIDATED_ACTIVITY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(DSL.name(alias), this)
    override fun `as`(alias: Name): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(alias, this)
    override fun `as`(alias: Table<*>): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RptMonthlyConsolidatedActivity = RptMonthlyConsolidatedActivity(name.getQualifiedName(), null)
}
