/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.keys.BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK
import com.squer.prorpel.jooq.tables.records.BatchJobExecutionParamsRecord

import java.time.LocalDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BatchJobExecutionParams(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BatchJobExecutionParamsRecord>?,
    aliased: Table<BatchJobExecutionParamsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BatchJobExecutionParamsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.batch_job_execution_params</code>
         */
        val BATCH_JOB_EXECUTION_PARAMS: BatchJobExecutionParams = BatchJobExecutionParams()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BatchJobExecutionParamsRecord> = BatchJobExecutionParamsRecord::class.java

    /**
     * The column
     * <code>public.batch_job_execution_params.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<BatchJobExecutionParamsRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.batch_job_execution_params.type_cd</code>.
     */
    val TYPE_CD: TableField<BatchJobExecutionParamsRecord, String?> = createField(DSL.name("type_cd"), SQLDataType.VARCHAR(6).nullable(false), this, "")

    /**
     * The column <code>public.batch_job_execution_params.key_name</code>.
     */
    val KEY_NAME: TableField<BatchJobExecutionParamsRecord, String?> = createField(DSL.name("key_name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.batch_job_execution_params.string_val</code>.
     */
    val STRING_VAL: TableField<BatchJobExecutionParamsRecord, String?> = createField(DSL.name("string_val"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.batch_job_execution_params.date_val</code>.
     */
    val DATE_VAL: TableField<BatchJobExecutionParamsRecord, LocalDateTime?> = createField(DSL.name("date_val"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.batch_job_execution_params.long_val</code>.
     */
    val LONG_VAL: TableField<BatchJobExecutionParamsRecord, Long?> = createField(DSL.name("long_val"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_job_execution_params.double_val</code>.
     */
    val DOUBLE_VAL: TableField<BatchJobExecutionParamsRecord, Double?> = createField(DSL.name("double_val"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.batch_job_execution_params.identifying</code>.
     */
    val IDENTIFYING: TableField<BatchJobExecutionParamsRecord, String?> = createField(DSL.name("identifying"), SQLDataType.CHAR(1).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BatchJobExecutionParamsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BatchJobExecutionParamsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.batch_job_execution_params</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.batch_job_execution_params</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.batch_job_execution_params</code> table reference
     */
    constructor(): this(DSL.name("batch_job_execution_params"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BatchJobExecutionParamsRecord>): this(Internal.createPathAlias(child, key), child, key, BATCH_JOB_EXECUTION_PARAMS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getReferences(): List<ForeignKey<BatchJobExecutionParamsRecord, *>> = listOf(BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK)

    private lateinit var _batchJobExecution: BatchJobExecution

    /**
     * Get the implicit join path to the <code>public.batch_job_execution</code>
     * table.
     */
    fun batchJobExecution(): BatchJobExecution {
        if (!this::_batchJobExecution.isInitialized)
            _batchJobExecution = BatchJobExecution(this, BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK)

        return _batchJobExecution;
    }

    val batchJobExecution: BatchJobExecution
        get(): BatchJobExecution = batchJobExecution()
    override fun `as`(alias: String): BatchJobExecutionParams = BatchJobExecutionParams(DSL.name(alias), this)
    override fun `as`(alias: Name): BatchJobExecutionParams = BatchJobExecutionParams(alias, this)
    override fun `as`(alias: Table<*>): BatchJobExecutionParams = BatchJobExecutionParams(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BatchJobExecutionParams = BatchJobExecutionParams(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BatchJobExecutionParams = BatchJobExecutionParams(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BatchJobExecutionParams = BatchJobExecutionParams(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?> = super.fieldsRow() as Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
