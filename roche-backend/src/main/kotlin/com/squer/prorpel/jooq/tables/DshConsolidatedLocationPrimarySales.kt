/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.IDX_LOC_PS_DIVISION
import com.squer.prorpel.jooq.indexes.IDX_LOC_PS_LOCATION
import com.squer.prorpel.jooq.indexes.IDX_LOC_PS_MONTH
import com.squer.prorpel.jooq.indexes.IDX_LOC_PS_YEAR
import com.squer.prorpel.jooq.indexes.IDX_LOC_PS_YEARMONTH
import com.squer.prorpel.jooq.tables.records.DshConsolidatedLocationPrimarySalesRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshConsolidatedLocationPrimarySales(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DshConsolidatedLocationPrimarySalesRecord>?,
    aliased: Table<DshConsolidatedLocationPrimarySalesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DshConsolidatedLocationPrimarySalesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.dsh_consolidated_location_primary_sales</code>
         */
        val DSH_CONSOLIDATED_LOCATION_PRIMARY_SALES: DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DshConsolidatedLocationPrimarySalesRecord> = DshConsolidatedLocationPrimarySalesRecord::class.java

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.division_id</code>.
     */
    val DIVISION_ID: TableField<DshConsolidatedLocationPrimarySalesRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.location_id</code>.
     */
    val LOCATION_ID: TableField<DshConsolidatedLocationPrimarySalesRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.month</code>.
     */
    val MONTH: TableField<DshConsolidatedLocationPrimarySalesRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.year</code>.
     */
    val YEAR: TableField<DshConsolidatedLocationPrimarySalesRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.yearmonth</code>.
     */
    val YEARMONTH: TableField<DshConsolidatedLocationPrimarySalesRecord, Int?> = createField(DSL.name("yearmonth"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.target_value</code>.
     */
    val TARGET_VALUE: TableField<DshConsolidatedLocationPrimarySalesRecord, Double?> = createField(DSL.name("target_value"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.target_quantity</code>.
     */
    val TARGET_QUANTITY: TableField<DshConsolidatedLocationPrimarySalesRecord, Double?> = createField(DSL.name("target_quantity"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.achivement_value</code>.
     */
    val ACHIVEMENT_VALUE: TableField<DshConsolidatedLocationPrimarySalesRecord, Double?> = createField(DSL.name("achivement_value"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.achievement_quantity</code>.
     */
    val ACHIEVEMENT_QUANTITY: TableField<DshConsolidatedLocationPrimarySalesRecord, Double?> = createField(DSL.name("achievement_quantity"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_primary_sales.pending_value</code>.
     */
    val PENDING_VALUE: TableField<DshConsolidatedLocationPrimarySalesRecord, Double?> = createField(DSL.name("pending_value"), SQLDataType.DOUBLE.defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "")

    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationPrimarySalesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationPrimarySalesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>public.dsh_consolidated_location_primary_sales</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>public.dsh_consolidated_location_primary_sales</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dsh_consolidated_location_primary_sales</code>
     * table reference
     */
    constructor(): this(DSL.name("dsh_consolidated_location_primary_sales"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DshConsolidatedLocationPrimarySalesRecord>): this(Internal.createPathAlias(child, key), child, key, DSH_CONSOLIDATED_LOCATION_PRIMARY_SALES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_LOC_PS_DIVISION, IDX_LOC_PS_LOCATION, IDX_LOC_PS_MONTH, IDX_LOC_PS_YEAR, IDX_LOC_PS_YEARMONTH)
    override fun `as`(alias: String): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(DSL.name(alias), this)
    override fun `as`(alias: Name): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(alias, this)
    override fun `as`(alias: Table<*>): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DshConsolidatedLocationPrimarySales = DshConsolidatedLocationPrimarySales(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Double?> = super.fieldsRow() as Row10<String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
