/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.TmpKamMappingUploadRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpKamMappingUpload(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TmpKamMappingUploadRecord>?,
    aliased: Table<TmpKamMappingUploadRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TmpKamMappingUploadRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.tmp_kam_mapping_upload</code>
         */
        val TMP_KAM_MAPPING_UPLOAD: TmpKamMappingUpload = TmpKamMappingUpload()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TmpKamMappingUploadRecord> = TmpKamMappingUploadRecord::class.java

    /**
     * The column <code>public.tmp_kam_mapping_upload.sub_customer</code>.
     */
    val SUB_CUSTOMER: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("sub_customer"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.sap_code</code>.
     */
    val SAP_CODE: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("sap_code"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.sub_customer_name</code>.
     */
    val SUB_CUSTOMER_NAME: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("sub_customer_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.account</code>.
     */
    val ACCOUNT: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("account"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.se_name</code>.
     */
    val SE_NAME: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("se_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.am_name</code>.
     */
    val AM_NAME: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("am_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.rm_name</code>.
     */
    val RM_NAME: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("rm_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<TmpKamMappingUploadRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.tmp_kam_mapping_upload.status</code>.
     */
    val STATUS: TableField<TmpKamMappingUploadRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<TmpKamMappingUploadRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TmpKamMappingUploadRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tmp_kam_mapping_upload</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tmp_kam_mapping_upload</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tmp_kam_mapping_upload</code> table reference
     */
    constructor(): this(DSL.name("tmp_kam_mapping_upload"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TmpKamMappingUploadRecord>): this(Internal.createPathAlias(child, key), child, key, TMP_KAM_MAPPING_UPLOAD, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): TmpKamMappingUpload = TmpKamMappingUpload(DSL.name(alias), this)
    override fun `as`(alias: Name): TmpKamMappingUpload = TmpKamMappingUpload(alias, this)
    override fun `as`(alias: Table<*>): TmpKamMappingUpload = TmpKamMappingUpload(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TmpKamMappingUpload = TmpKamMappingUpload(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TmpKamMappingUpload = TmpKamMappingUpload(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TmpKamMappingUpload = TmpKamMappingUpload(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, String?, String?, String?, String?, String?, String?, Long?, String?> = super.fieldsRow() as Row9<String?, String?, String?, String?, String?, String?, String?, Long?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, String?, String?, String?, String?, Long?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, String?, String?, String?, String?, Long?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
