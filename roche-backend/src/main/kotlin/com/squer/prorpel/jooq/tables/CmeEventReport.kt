/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.CmeEventReportRecord

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row21
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CmeEventReport(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CmeEventReportRecord>?,
    aliased: Table<CmeEventReportRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CmeEventReportRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cme_event_report</code>
         */
        val CME_EVENT_REPORT: CmeEventReport = CmeEventReport()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CmeEventReportRecord> = CmeEventReportRecord::class.java

    /**
     * The column <code>public.cme_event_report.payment_date</code>.
     */
    val PAYMENT_DATE: TableField<CmeEventReportRecord, LocalDate?> = createField(DSL.name("payment_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.cme_event_report.id</code>.
     */
    val ID: TableField<CmeEventReportRecord, String?> = createField(DSL.name("id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.others</code>.
     */
    val OTHERS: TableField<CmeEventReportRecord, Int?> = createField(DSL.name("others"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_event_report.status</code>.
     */
    val STATUS: TableField<CmeEventReportRecord, String?> = createField(DSL.name("status"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.created_by</code>.
     */
    val CREATED_BY: TableField<CmeEventReportRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.dne</code>.
     */
    val DNE: TableField<CmeEventReportRecord, Int?> = createField(DSL.name("dne"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_event_report.approval_comment</code>.
     */
    val APPROVAL_COMMENT: TableField<CmeEventReportRecord, String?> = createField(DSL.name("approval_comment"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_event_report.doctors</code>.
     */
    val DOCTORS: TableField<CmeEventReportRecord, Int?> = createField(DSL.name("doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_event_report.support_staff</code>.
     */
    val SUPPORT_STAFF: TableField<CmeEventReportRecord, Int?> = createField(DSL.name("support_staff"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_event_report.no_of_doctor</code>.
     */
    val NO_OF_DOCTOR: TableField<CmeEventReportRecord, Int?> = createField(DSL.name("no_of_doctor"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_event_report.stale_id</code>.
     */
    val STALE_ID: TableField<CmeEventReportRecord, String?> = createField(DSL.name("stale_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_event_report.payment_amount</code>.
     */
    val PAYMENT_AMOUNT: TableField<CmeEventReportRecord, Double?> = createField(DSL.name("payment_amount"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.cme_event_report.updated_by</code>.
     */
    val UPDATED_BY: TableField<CmeEventReportRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.remark</code>.
     */
    val REMARK: TableField<CmeEventReportRecord, String?> = createField(DSL.name("remark"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_event_report.action_by</code>.
     */
    val ACTION_BY: TableField<CmeEventReportRecord, String?> = createField(DSL.name("action_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.current_status</code>.
     */
    val CURRENT_STATUS: TableField<CmeEventReportRecord, String?> = createField(DSL.name("current_status"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.updated_on</code>.
     */
    val UPDATED_ON: TableField<CmeEventReportRecord, OffsetDateTime?> = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_event_report.group_id</code>.
     */
    val GROUP_ID: TableField<CmeEventReportRecord, String?> = createField(DSL.name("group_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.created_on</code>.
     */
    val CREATED_ON: TableField<CmeEventReportRecord, OffsetDateTime?> = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_event_report.event_id</code>.
     */
    val EVENT_ID: TableField<CmeEventReportRecord, String?> = createField(DSL.name("event_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_event_report.old_created_by</code>.
     */
    val OLD_CREATED_BY: TableField<CmeEventReportRecord, String?> = createField(DSL.name("old_created_by"), SQLDataType.VARCHAR(37), this, "")

    private constructor(alias: Name, aliased: Table<CmeEventReportRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CmeEventReportRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cme_event_report</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cme_event_report</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cme_event_report</code> table reference
     */
    constructor(): this(DSL.name("cme_event_report"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CmeEventReportRecord>): this(Internal.createPathAlias(child, key), child, key, CME_EVENT_REPORT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): CmeEventReport = CmeEventReport(DSL.name(alias), this)
    override fun `as`(alias: Name): CmeEventReport = CmeEventReport(alias, this)
    override fun `as`(alias: Table<*>): CmeEventReport = CmeEventReport(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CmeEventReport = CmeEventReport(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CmeEventReport = CmeEventReport(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CmeEventReport = CmeEventReport(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row21<LocalDate?, String?, Int?, String?, String?, Int?, String?, Int?, Int?, Int?, String?, Double?, String?, String?, String?, String?, OffsetDateTime?, String?, OffsetDateTime?, String?, String?> = super.fieldsRow() as Row21<LocalDate?, String?, Int?, String?, String?, Int?, String?, Int?, Int?, Int?, String?, Double?, String?, String?, String?, String?, OffsetDateTime?, String?, OffsetDateTime?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (LocalDate?, String?, Int?, String?, String?, Int?, String?, Int?, Int?, Int?, String?, Double?, String?, String?, String?, String?, OffsetDateTime?, String?, OffsetDateTime?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (LocalDate?, String?, Int?, String?, String?, Int?, String?, Int?, Int?, Int?, String?, Double?, String?, String?, String?, String?, OffsetDateTime?, String?, OffsetDateTime?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
