/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.TMP_CONSOLIDATED_COVERAGE_JOB_EXECUTION_ID_IDX
import com.squer.prorpel.jooq.indexes.TMP_CONSOLIDATED_COVERAGE_LOCATION_ID_IDX
import com.squer.prorpel.jooq.indexes.TMP_CONSOLIDATED_COVERAGE_YYYY_MM_IDX
import com.squer.prorpel.jooq.tables.records.TmpConsolidatedCoverageRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row19
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpConsolidatedCoverage(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TmpConsolidatedCoverageRecord>?,
    aliased: Table<TmpConsolidatedCoverageRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TmpConsolidatedCoverageRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.tmp_consolidated_coverage</code>
         */
        val TMP_CONSOLIDATED_COVERAGE: TmpConsolidatedCoverage = TmpConsolidatedCoverage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TmpConsolidatedCoverageRecord> = TmpConsolidatedCoverageRecord::class.java

    /**
     * The column <code>public.tmp_consolidated_coverage.yyyy_mm</code>.
     */
    val YYYY_MM: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("yyyy_mm"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.tmp_consolidated_coverage.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<TmpConsolidatedCoverageRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.location_id</code>.
     */
    val LOCATION_ID: TableField<TmpConsolidatedCoverageRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.a_visits</code>.
     */
    val A_VISITS: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("a_visits"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.a_count</code>.
     */
    val A_COUNT: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("a_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.b_visits</code>.
     */
    val B_VISITS: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("b_visits"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.b_count</code>.
     */
    val B_COUNT: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("b_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.c_visits</code>.
     */
    val C_VISITS: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("c_visits"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.c_count</code>.
     */
    val C_COUNT: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("c_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.total_visits</code>.
     */
    val TOTAL_VISITS: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("total_visits"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.total_count</code>.
     */
    val TOTAL_COUNT: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("total_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.division_id</code>.
     */
    val DIVISION_ID: TableField<TmpConsolidatedCoverageRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.a_coverage</code>.
     */
    val A_COVERAGE: TableField<TmpConsolidatedCoverageRecord, Double?> = createField(DSL.name("a_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.b_coverage</code>.
     */
    val B_COVERAGE: TableField<TmpConsolidatedCoverageRecord, Double?> = createField(DSL.name("b_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.c_coverage</code>.
     */
    val C_COVERAGE: TableField<TmpConsolidatedCoverageRecord, Double?> = createField(DSL.name("c_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.total_coverage</code>.
     */
    val TOTAL_COVERAGE: TableField<TmpConsolidatedCoverageRecord, Double?> = createField(DSL.name("total_coverage"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.field_days</code>.
     */
    val FIELD_DAYS: TableField<TmpConsolidatedCoverageRecord, Double?> = createField(DSL.name("field_days"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.month</code>.
     */
    val MONTH: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_coverage.year</code>.
     */
    val YEAR: TableField<TmpConsolidatedCoverageRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<TmpConsolidatedCoverageRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TmpConsolidatedCoverageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tmp_consolidated_coverage</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tmp_consolidated_coverage</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tmp_consolidated_coverage</code> table reference
     */
    constructor(): this(DSL.name("tmp_consolidated_coverage"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TmpConsolidatedCoverageRecord>): this(Internal.createPathAlias(child, key), child, key, TMP_CONSOLIDATED_COVERAGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(TMP_CONSOLIDATED_COVERAGE_JOB_EXECUTION_ID_IDX, TMP_CONSOLIDATED_COVERAGE_LOCATION_ID_IDX, TMP_CONSOLIDATED_COVERAGE_YYYY_MM_IDX)
    override fun `as`(alias: String): TmpConsolidatedCoverage = TmpConsolidatedCoverage(DSL.name(alias), this)
    override fun `as`(alias: Name): TmpConsolidatedCoverage = TmpConsolidatedCoverage(alias, this)
    override fun `as`(alias: Table<*>): TmpConsolidatedCoverage = TmpConsolidatedCoverage(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TmpConsolidatedCoverage = TmpConsolidatedCoverage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TmpConsolidatedCoverage = TmpConsolidatedCoverage(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TmpConsolidatedCoverage = TmpConsolidatedCoverage(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row19<Int?, Long?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Int?, Int?> = super.fieldsRow() as Row19<Int?, Long?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Long?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Long?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
