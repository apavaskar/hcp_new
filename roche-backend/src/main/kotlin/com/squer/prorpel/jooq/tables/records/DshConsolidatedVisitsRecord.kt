/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.DshConsolidatedVisits

import java.time.LocalDateTime

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshConsolidatedVisitsRecord() : TableRecordImpl<DshConsolidatedVisitsRecord>(DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS), Record8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?> {

    open var month: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var year: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var yearmonth: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var locationId: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var attendeeId: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var classificationId: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var lastVisitDate: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    open var visitCount: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?> = super.fieldsRow() as Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?>
    override fun valuesRow(): Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?> = super.valuesRow() as Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?>
    override fun field1(): Field<Int?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.MONTH
    override fun field2(): Field<Int?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.YEAR
    override fun field3(): Field<Int?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.YEARMONTH
    override fun field4(): Field<String?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.LOCATION_ID
    override fun field5(): Field<String?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.ATTENDEE_ID
    override fun field6(): Field<String?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.CLASSIFICATION_ID
    override fun field7(): Field<LocalDateTime?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.LAST_VISIT_DATE
    override fun field8(): Field<Int?> = DshConsolidatedVisits.DSH_CONSOLIDATED_VISITS.VISIT_COUNT
    override fun component1(): Int? = month
    override fun component2(): Int? = year
    override fun component3(): Int? = yearmonth
    override fun component4(): String? = locationId
    override fun component5(): String? = attendeeId
    override fun component6(): String? = classificationId
    override fun component7(): LocalDateTime? = lastVisitDate
    override fun component8(): Int? = visitCount
    override fun value1(): Int? = month
    override fun value2(): Int? = year
    override fun value3(): Int? = yearmonth
    override fun value4(): String? = locationId
    override fun value5(): String? = attendeeId
    override fun value6(): String? = classificationId
    override fun value7(): LocalDateTime? = lastVisitDate
    override fun value8(): Int? = visitCount

    override fun value1(value: Int?): DshConsolidatedVisitsRecord {
        this.month = value
        return this
    }

    override fun value2(value: Int?): DshConsolidatedVisitsRecord {
        this.year = value
        return this
    }

    override fun value3(value: Int?): DshConsolidatedVisitsRecord {
        this.yearmonth = value
        return this
    }

    override fun value4(value: String?): DshConsolidatedVisitsRecord {
        this.locationId = value
        return this
    }

    override fun value5(value: String?): DshConsolidatedVisitsRecord {
        this.attendeeId = value
        return this
    }

    override fun value6(value: String?): DshConsolidatedVisitsRecord {
        this.classificationId = value
        return this
    }

    override fun value7(value: LocalDateTime?): DshConsolidatedVisitsRecord {
        this.lastVisitDate = value
        return this
    }

    override fun value8(value: Int?): DshConsolidatedVisitsRecord {
        this.visitCount = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: String?, value5: String?, value6: String?, value7: LocalDateTime?, value8: Int?): DshConsolidatedVisitsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised DshConsolidatedVisitsRecord
     */
    constructor(month: Int? = null, year: Int? = null, yearmonth: Int? = null, locationId: String? = null, attendeeId: String? = null, classificationId: String? = null, lastVisitDate: LocalDateTime? = null, visitCount: Int? = null): this() {
        this.month = month
        this.year = year
        this.yearmonth = yearmonth
        this.locationId = locationId
        this.attendeeId = attendeeId
        this.classificationId = classificationId
        this.lastVisitDate = lastVisitDate
        this.visitCount = visitCount
    }
}
