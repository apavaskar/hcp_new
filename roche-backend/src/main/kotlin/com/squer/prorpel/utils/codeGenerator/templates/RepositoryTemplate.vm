package $repositoryPackageName

import $entityPath
import $tablePath
import com.squer.prorpel.persistence.BaseRepository
import com.squer.prorpel.persistence.SearchCriteria
import org.jooq.DSLContext
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.stereotype.Repository

@Repository
class $repositoryName: BaseRepository<$entityName>() {
    @Autowired
    @Qualifier("jooqContext")
    private lateinit var dslContext: DSLContext

    override fun findById(id: Long): $entityName? {
    return dslContext.select(${tableName}.asterisk())
    .from($tableName)
    .where(${tableName}.ID.eq(id))
    .fetchOneInto($entityName:: class.java)
    }

    override fun delete(id: Long): Long? {
        TODO("Not yet implemented")
    }

    override fun find(criteria: SearchCriteria): List<$entityName> {
        return dslContext.select(${tableName}.asterisk())
        .from(${tableName})
        .where(getConditions(criteria))
        .fetchInto($entityName:: class.java)
    }

    override fun update(entity: $entityName): Long {
        super.fillEntityForUpdate(entity)
        $updateRow
    }

    override fun create(entity: $entityName): Long {
        super.fillEntityForCreate(entity)
        $createRow
    }
}