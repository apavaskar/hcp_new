/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.TmpConsolidatedFrequencyRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row15
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpConsolidatedFrequency(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TmpConsolidatedFrequencyRecord>?,
    aliased: Table<TmpConsolidatedFrequencyRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TmpConsolidatedFrequencyRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.tmp_consolidated_frequency</code>
         */
        val TMP_CONSOLIDATED_FREQUENCY: TmpConsolidatedFrequency = TmpConsolidatedFrequency()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TmpConsolidatedFrequencyRecord> = TmpConsolidatedFrequencyRecord::class.java

    /**
     * The column <code>public.tmp_consolidated_frequency.yyyy_mm</code>.
     */
    val YYYY_MM: TableField<TmpConsolidatedFrequencyRecord, Int?> = createField(DSL.name("yyyy_mm"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.month_report</code>.
     */
    val MONTH_REPORT: TableField<TmpConsolidatedFrequencyRecord, Int?> = createField(DSL.name("month_report"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.year_report</code>.
     */
    val YEAR_REPORT: TableField<TmpConsolidatedFrequencyRecord, Int?> = createField(DSL.name("year_report"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.location_id</code>.
     */
    val LOCATION_ID: TableField<TmpConsolidatedFrequencyRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.division_id</code>.
     */
    val DIVISION_ID: TableField<TmpConsolidatedFrequencyRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.tmp_consolidated_frequency.a_frequency_met</code>.
     */
    val A_FREQUENCY_MET: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("a_frequency_met"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.tmp_consolidated_frequency.b_frequency_met</code>.
     */
    val B_FREQUENCY_MET: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("b_frequency_met"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.tmp_consolidated_frequency.c_frequency_met</code>.
     */
    val C_FREQUENCY_MET: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("c_frequency_met"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.a_count</code>.
     */
    val A_COUNT: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("a_count"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.b_count</code>.
     */
    val B_COUNT: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("b_count"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.c_count</code>.
     */
    val C_COUNT: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("c_count"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.a_frequency</code>.
     */
    val A_FREQUENCY: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("a_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.b_frequency</code>.
     */
    val B_FREQUENCY: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("b_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.tmp_consolidated_frequency.c_frequency</code>.
     */
    val C_FREQUENCY: TableField<TmpConsolidatedFrequencyRecord, Double?> = createField(DSL.name("c_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.tmp_consolidated_frequency.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<TmpConsolidatedFrequencyRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<TmpConsolidatedFrequencyRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TmpConsolidatedFrequencyRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tmp_consolidated_frequency</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tmp_consolidated_frequency</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tmp_consolidated_frequency</code> table reference
     */
    constructor(): this(DSL.name("tmp_consolidated_frequency"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TmpConsolidatedFrequencyRecord>): this(Internal.createPathAlias(child, key), child, key, TMP_CONSOLIDATED_FREQUENCY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): TmpConsolidatedFrequency = TmpConsolidatedFrequency(DSL.name(alias), this)
    override fun `as`(alias: Name): TmpConsolidatedFrequency = TmpConsolidatedFrequency(alias, this)
    override fun `as`(alias: Table<*>): TmpConsolidatedFrequency = TmpConsolidatedFrequency(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TmpConsolidatedFrequency = TmpConsolidatedFrequency(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TmpConsolidatedFrequency = TmpConsolidatedFrequency(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TmpConsolidatedFrequency = TmpConsolidatedFrequency(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<Int?, Int?, Int?, String?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Long?> = super.fieldsRow() as Row15<Int?, Int?, Int?, String?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
