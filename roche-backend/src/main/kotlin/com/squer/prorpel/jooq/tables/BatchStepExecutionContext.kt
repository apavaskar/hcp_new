/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.keys.BATCH_STEP_EXECUTION_CONTEXT_PKEY
import com.squer.prorpel.jooq.keys.BATCH_STEP_EXECUTION_CONTEXT__STEP_EXEC_CTX_FK
import com.squer.prorpel.jooq.tables.records.BatchStepExecutionContextRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BatchStepExecutionContext(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BatchStepExecutionContextRecord>?,
    aliased: Table<BatchStepExecutionContextRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BatchStepExecutionContextRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.batch_step_execution_context</code>
         */
        val BATCH_STEP_EXECUTION_CONTEXT: BatchStepExecutionContext = BatchStepExecutionContext()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BatchStepExecutionContextRecord> = BatchStepExecutionContextRecord::class.java

    /**
     * The column
     * <code>public.batch_step_execution_context.step_execution_id</code>.
     */
    val STEP_EXECUTION_ID: TableField<BatchStepExecutionContextRecord, Long?> = createField(DSL.name("step_execution_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>public.batch_step_execution_context.short_context</code>.
     */
    val SHORT_CONTEXT: TableField<BatchStepExecutionContextRecord, String?> = createField(DSL.name("short_context"), SQLDataType.VARCHAR(2500).nullable(false), this, "")

    /**
     * The column
     * <code>public.batch_step_execution_context.serialized_context</code>.
     */
    val SERIALIZED_CONTEXT: TableField<BatchStepExecutionContextRecord, String?> = createField(DSL.name("serialized_context"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<BatchStepExecutionContextRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BatchStepExecutionContextRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.batch_step_execution_context</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.batch_step_execution_context</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.batch_step_execution_context</code> table reference
     */
    constructor(): this(DSL.name("batch_step_execution_context"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BatchStepExecutionContextRecord>): this(Internal.createPathAlias(child, key), child, key, BATCH_STEP_EXECUTION_CONTEXT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BatchStepExecutionContextRecord> = BATCH_STEP_EXECUTION_CONTEXT_PKEY
    override fun getReferences(): List<ForeignKey<BatchStepExecutionContextRecord, *>> = listOf(BATCH_STEP_EXECUTION_CONTEXT__STEP_EXEC_CTX_FK)

    private lateinit var _batchStepExecution: BatchStepExecution

    /**
     * Get the implicit join path to the
     * <code>public.batch_step_execution</code> table.
     */
    fun batchStepExecution(): BatchStepExecution {
        if (!this::_batchStepExecution.isInitialized)
            _batchStepExecution = BatchStepExecution(this, BATCH_STEP_EXECUTION_CONTEXT__STEP_EXEC_CTX_FK)

        return _batchStepExecution;
    }

    val batchStepExecution: BatchStepExecution
        get(): BatchStepExecution = batchStepExecution()
    override fun `as`(alias: String): BatchStepExecutionContext = BatchStepExecutionContext(DSL.name(alias), this)
    override fun `as`(alias: Name): BatchStepExecutionContext = BatchStepExecutionContext(alias, this)
    override fun `as`(alias: Table<*>): BatchStepExecutionContext = BatchStepExecutionContext(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BatchStepExecutionContext = BatchStepExecutionContext(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BatchStepExecutionContext = BatchStepExecutionContext(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BatchStepExecutionContext = BatchStepExecutionContext(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, String?, String?> = super.fieldsRow() as Row3<Long?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
