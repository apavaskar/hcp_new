/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.BatchJobExecutionParams

import java.time.LocalDateTime

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BatchJobExecutionParamsRecord() : TableRecordImpl<BatchJobExecutionParamsRecord>(BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS), Record8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?> {

    open var jobExecutionId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var typeCd: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var keyName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var stringVal: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var dateVal: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var longVal: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var doubleVal: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var identifying: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?> = super.fieldsRow() as Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?>
    override fun valuesRow(): Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?> = super.valuesRow() as Row8<Long?, String?, String?, String?, LocalDateTime?, Long?, Double?, String?>
    override fun field1(): Field<Long?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.JOB_EXECUTION_ID
    override fun field2(): Field<String?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.TYPE_CD
    override fun field3(): Field<String?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.KEY_NAME
    override fun field4(): Field<String?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.STRING_VAL
    override fun field5(): Field<LocalDateTime?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.DATE_VAL
    override fun field6(): Field<Long?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.LONG_VAL
    override fun field7(): Field<Double?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.DOUBLE_VAL
    override fun field8(): Field<String?> = BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.IDENTIFYING
    override fun component1(): Long? = jobExecutionId
    override fun component2(): String? = typeCd
    override fun component3(): String? = keyName
    override fun component4(): String? = stringVal
    override fun component5(): LocalDateTime? = dateVal
    override fun component6(): Long? = longVal
    override fun component7(): Double? = doubleVal
    override fun component8(): String? = identifying
    override fun value1(): Long? = jobExecutionId
    override fun value2(): String? = typeCd
    override fun value3(): String? = keyName
    override fun value4(): String? = stringVal
    override fun value5(): LocalDateTime? = dateVal
    override fun value6(): Long? = longVal
    override fun value7(): Double? = doubleVal
    override fun value8(): String? = identifying

    override fun value1(value: Long?): BatchJobExecutionParamsRecord {
        this.jobExecutionId = value
        return this
    }

    override fun value2(value: String?): BatchJobExecutionParamsRecord {
        this.typeCd = value
        return this
    }

    override fun value3(value: String?): BatchJobExecutionParamsRecord {
        this.keyName = value
        return this
    }

    override fun value4(value: String?): BatchJobExecutionParamsRecord {
        this.stringVal = value
        return this
    }

    override fun value5(value: LocalDateTime?): BatchJobExecutionParamsRecord {
        this.dateVal = value
        return this
    }

    override fun value6(value: Long?): BatchJobExecutionParamsRecord {
        this.longVal = value
        return this
    }

    override fun value7(value: Double?): BatchJobExecutionParamsRecord {
        this.doubleVal = value
        return this
    }

    override fun value8(value: String?): BatchJobExecutionParamsRecord {
        this.identifying = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: LocalDateTime?, value6: Long?, value7: Double?, value8: String?): BatchJobExecutionParamsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised BatchJobExecutionParamsRecord
     */
    constructor(jobExecutionId: Long? = null, typeCd: String? = null, keyName: String? = null, stringVal: String? = null, dateVal: LocalDateTime? = null, longVal: Long? = null, doubleVal: Double? = null, identifying: String? = null): this() {
        this.jobExecutionId = jobExecutionId
        this.typeCd = typeCd
        this.keyName = keyName
        this.stringVal = stringVal
        this.dateVal = dateVal
        this.longVal = longVal
        this.doubleVal = doubleVal
        this.identifying = identifying
    }
}
