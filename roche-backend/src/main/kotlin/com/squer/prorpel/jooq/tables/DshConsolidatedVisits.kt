/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.DSH_CONSOLIDATED_VISITS_LOCATION_ID_INDEX
import com.squer.prorpel.jooq.indexes.DSH_CONSOLIDATED_VISITS_YEARMONTH_INDEX
import com.squer.prorpel.jooq.tables.records.DshConsolidatedVisitsRecord

import java.time.LocalDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshConsolidatedVisits(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DshConsolidatedVisitsRecord>?,
    aliased: Table<DshConsolidatedVisitsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DshConsolidatedVisitsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dsh_consolidated_visits</code>
         */
        val DSH_CONSOLIDATED_VISITS: DshConsolidatedVisits = DshConsolidatedVisits()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DshConsolidatedVisitsRecord> = DshConsolidatedVisitsRecord::class.java

    /**
     * The column <code>public.dsh_consolidated_visits.month</code>.
     */
    val MONTH: TableField<DshConsolidatedVisitsRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.year</code>.
     */
    val YEAR: TableField<DshConsolidatedVisitsRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.yearmonth</code>.
     */
    val YEARMONTH: TableField<DshConsolidatedVisitsRecord, Int?> = createField(DSL.name("yearmonth"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.location_id</code>.
     */
    val LOCATION_ID: TableField<DshConsolidatedVisitsRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.attendee_id</code>.
     */
    val ATTENDEE_ID: TableField<DshConsolidatedVisitsRecord, String?> = createField(DSL.name("attendee_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.classification_id</code>.
     */
    val CLASSIFICATION_ID: TableField<DshConsolidatedVisitsRecord, String?> = createField(DSL.name("classification_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.last_visit_date</code>.
     */
    val LAST_VISIT_DATE: TableField<DshConsolidatedVisitsRecord, LocalDateTime?> = createField(DSL.name("last_visit_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.dsh_consolidated_visits.visit_count</code>.
     */
    val VISIT_COUNT: TableField<DshConsolidatedVisitsRecord, Int?> = createField(DSL.name("visit_count"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<DshConsolidatedVisitsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DshConsolidatedVisitsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dsh_consolidated_visits</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dsh_consolidated_visits</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dsh_consolidated_visits</code> table reference
     */
    constructor(): this(DSL.name("dsh_consolidated_visits"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DshConsolidatedVisitsRecord>): this(Internal.createPathAlias(child, key), child, key, DSH_CONSOLIDATED_VISITS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(DSH_CONSOLIDATED_VISITS_LOCATION_ID_INDEX, DSH_CONSOLIDATED_VISITS_YEARMONTH_INDEX)
    override fun `as`(alias: String): DshConsolidatedVisits = DshConsolidatedVisits(DSL.name(alias), this)
    override fun `as`(alias: Name): DshConsolidatedVisits = DshConsolidatedVisits(alias, this)
    override fun `as`(alias: Table<*>): DshConsolidatedVisits = DshConsolidatedVisits(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DshConsolidatedVisits = DshConsolidatedVisits(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DshConsolidatedVisits = DshConsolidatedVisits(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DshConsolidatedVisits = DshConsolidatedVisits(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?> = super.fieldsRow() as Row8<Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, String?, String?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
