/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.BatchJobInstance

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BatchJobInstanceRecord() : UpdatableRecordImpl<BatchJobInstanceRecord>(BatchJobInstance.BATCH_JOB_INSTANCE), Record4<Long?, Long?, String?, String?> {

    open var jobInstanceId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var version: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var jobName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var jobKey: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, String?, String?> = super.fieldsRow() as Row4<Long?, Long?, String?, String?>
    override fun valuesRow(): Row4<Long?, Long?, String?, String?> = super.valuesRow() as Row4<Long?, Long?, String?, String?>
    override fun field1(): Field<Long?> = BatchJobInstance.BATCH_JOB_INSTANCE.JOB_INSTANCE_ID
    override fun field2(): Field<Long?> = BatchJobInstance.BATCH_JOB_INSTANCE.VERSION
    override fun field3(): Field<String?> = BatchJobInstance.BATCH_JOB_INSTANCE.JOB_NAME
    override fun field4(): Field<String?> = BatchJobInstance.BATCH_JOB_INSTANCE.JOB_KEY
    override fun component1(): Long? = jobInstanceId
    override fun component2(): Long? = version
    override fun component3(): String? = jobName
    override fun component4(): String? = jobKey
    override fun value1(): Long? = jobInstanceId
    override fun value2(): Long? = version
    override fun value3(): String? = jobName
    override fun value4(): String? = jobKey

    override fun value1(value: Long?): BatchJobInstanceRecord {
        this.jobInstanceId = value
        return this
    }

    override fun value2(value: Long?): BatchJobInstanceRecord {
        this.version = value
        return this
    }

    override fun value3(value: String?): BatchJobInstanceRecord {
        this.jobName = value
        return this
    }

    override fun value4(value: String?): BatchJobInstanceRecord {
        this.jobKey = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: String?): BatchJobInstanceRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised BatchJobInstanceRecord
     */
    constructor(jobInstanceId: Long? = null, version: Long? = null, jobName: String? = null, jobKey: String? = null): this() {
        this.jobInstanceId = jobInstanceId
        this.version = version
        this.jobName = jobName
        this.jobKey = jobKey
    }
}
