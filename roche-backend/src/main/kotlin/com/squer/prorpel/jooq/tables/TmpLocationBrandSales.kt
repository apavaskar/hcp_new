/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.TmpLocationBrandSalesRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpLocationBrandSales(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TmpLocationBrandSalesRecord>?,
    aliased: Table<TmpLocationBrandSalesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TmpLocationBrandSalesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.tmp_location_brand_sales</code>
         */
        val TMP_LOCATION_BRAND_SALES: TmpLocationBrandSales = TmpLocationBrandSales()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TmpLocationBrandSalesRecord> = TmpLocationBrandSalesRecord::class.java

    /**
     * The column <code>public.tmp_location_brand_sales.yyyymm</code>.
     */
    val YYYYMM: TableField<TmpLocationBrandSalesRecord, Int?> = createField(DSL.name("yyyymm"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.year_sls</code>.
     */
    val YEAR_SLS: TableField<TmpLocationBrandSalesRecord, Int?> = createField(DSL.name("year_sls"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.month_sls</code>.
     */
    val MONTH_SLS: TableField<TmpLocationBrandSalesRecord, Int?> = createField(DSL.name("month_sls"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.division_id</code>.
     */
    val DIVISION_ID: TableField<TmpLocationBrandSalesRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.location_id</code>.
     */
    val LOCATION_ID: TableField<TmpLocationBrandSalesRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.brand_id</code>.
     */
    val BRAND_ID: TableField<TmpLocationBrandSalesRecord, String?> = createField(DSL.name("brand_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_location_brand_sales.sales_amount</code>.
     */
    val SALES_AMOUNT: TableField<TmpLocationBrandSalesRecord, Double?> = createField(DSL.name("sales_amount"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<TmpLocationBrandSalesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TmpLocationBrandSalesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tmp_location_brand_sales</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tmp_location_brand_sales</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tmp_location_brand_sales</code> table reference
     */
    constructor(): this(DSL.name("tmp_location_brand_sales"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TmpLocationBrandSalesRecord>): this(Internal.createPathAlias(child, key), child, key, TMP_LOCATION_BRAND_SALES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): TmpLocationBrandSales = TmpLocationBrandSales(DSL.name(alias), this)
    override fun `as`(alias: Name): TmpLocationBrandSales = TmpLocationBrandSales(alias, this)
    override fun `as`(alias: Table<*>): TmpLocationBrandSales = TmpLocationBrandSales(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TmpLocationBrandSales = TmpLocationBrandSales(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TmpLocationBrandSales = TmpLocationBrandSales(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TmpLocationBrandSales = TmpLocationBrandSales(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, Int?, Int?, String?, String?, String?, Double?> = super.fieldsRow() as Row7<Int?, Int?, Int?, String?, String?, String?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, String?, String?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, String?, String?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
