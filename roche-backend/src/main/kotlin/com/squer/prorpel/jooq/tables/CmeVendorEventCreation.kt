/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.CmeVendorEventCreationRecord

import java.time.LocalDateTime
import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CmeVendorEventCreation(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CmeVendorEventCreationRecord>?,
    aliased: Table<CmeVendorEventCreationRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CmeVendorEventCreationRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.cme_vendor_event_creation</code>
         */
        val CME_VENDOR_EVENT_CREATION: CmeVendorEventCreation = CmeVendorEventCreation()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CmeVendorEventCreationRecord> = CmeVendorEventCreationRecord::class.java

    /**
     * The column <code>public.cme_vendor_event_creation.id</code>.
     */
    val ID: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.doctors</code>.
     */
    val DOCTORS: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.support_staff</code>.
     */
    val SUPPORT_STAFF: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("support_staff"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.cme_vendor_event_creation.approval_comment</code>.
     */
    val APPROVAL_COMMENT: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("approval_comment"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.created_by</code>.
     */
    val CREATED_BY: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.event_venue</code>.
     */
    val EVENT_VENUE: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("event_venue"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.no_of_doctor</code>.
     */
    val NO_OF_DOCTOR: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("no_of_doctor"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.event_date</code>.
     */
    val EVENT_DATE: TableField<CmeVendorEventCreationRecord, OffsetDateTime?> = createField(DSL.name("event_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.status</code>.
     */
    val STATUS: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("status"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.others</code>.
     */
    val OTHERS: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("others"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.stale_id</code>.
     */
    val STALE_ID: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("stale_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.comment</code>.
     */
    val COMMENT: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("comment"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.dne</code>.
     */
    val DNE: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("dne"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.group_id</code>.
     */
    val GROUP_ID: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("group_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.updated_by</code>.
     */
    val UPDATED_BY: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.action_by</code>.
     */
    val ACTION_BY: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("action_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.current_status</code>.
     */
    val CURRENT_STATUS: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("current_status"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.event_topic</code>.
     */
    val EVENT_TOPIC: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("event_topic"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.updated_on</code>.
     */
    val UPDATED_ON: TableField<CmeVendorEventCreationRecord, OffsetDateTime?> = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.created_on</code>.
     */
    val CREATED_ON: TableField<CmeVendorEventCreationRecord, OffsetDateTime?> = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.event_type_id</code>.
     */
    val EVENT_TYPE_ID: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("event_type_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.cme_vendor_event_creation.advanced_request</code>.
     */
    val ADVANCED_REQUEST: TableField<CmeVendorEventCreationRecord, Double?> = createField(DSL.name("advanced_request"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.event_no</code>.
     */
    val EVENT_NO: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("event_no"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.product</code>.
     */
    val PRODUCT: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("product"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.percent</code>.
     */
    val PERCENT: TableField<CmeVendorEventCreationRecord, Double?> = createField(DSL.name("percent"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.old_event_date</code>.
     */
    val OLD_EVENT_DATE: TableField<CmeVendorEventCreationRecord, OffsetDateTime?> = createField(DSL.name("old_event_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column
     * <code>public.cme_vendor_event_creation.paid_advanced_request</code>.
     */
    val PAID_ADVANCED_REQUEST: TableField<CmeVendorEventCreationRecord, Double?> = createField(DSL.name("paid_advanced_request"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.cme_vendor_event_creation.transaction_date</code>.
     */
    val TRANSACTION_DATE: TableField<CmeVendorEventCreationRecord, OffsetDateTime?> = createField(DSL.name("transaction_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column
     * <code>public.cme_vendor_event_creation.transaction_detail</code>.
     */
    val TRANSACTION_DETAIL: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("transaction_detail"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.aborted_reason</code>.
     */
    val ABORTED_REASON: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("aborted_reason"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.conducted_date</code>.
     */
    val CONDUCTED_DATE: TableField<CmeVendorEventCreationRecord, LocalDateTime?> = createField(DSL.name("conducted_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.is_conducted</code>.
     */
    val IS_CONDUCTED: TableField<CmeVendorEventCreationRecord, Int?> = createField(DSL.name("is_conducted"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_vendor_event_creation.old_created_by</code>.
     */
    val OLD_CREATED_BY: TableField<CmeVendorEventCreationRecord, String?> = createField(DSL.name("old_created_by"), SQLDataType.VARCHAR(37), this, "")

    private constructor(alias: Name, aliased: Table<CmeVendorEventCreationRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CmeVendorEventCreationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cme_vendor_event_creation</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cme_vendor_event_creation</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cme_vendor_event_creation</code> table reference
     */
    constructor(): this(DSL.name("cme_vendor_event_creation"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CmeVendorEventCreationRecord>): this(Internal.createPathAlias(child, key), child, key, CME_VENDOR_EVENT_CREATION, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): CmeVendorEventCreation = CmeVendorEventCreation(DSL.name(alias), this)
    override fun `as`(alias: Name): CmeVendorEventCreation = CmeVendorEventCreation(alias, this)
    override fun `as`(alias: Table<*>): CmeVendorEventCreation = CmeVendorEventCreation(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CmeVendorEventCreation = CmeVendorEventCreation(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CmeVendorEventCreation = CmeVendorEventCreation(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CmeVendorEventCreation = CmeVendorEventCreation(name.getQualifiedName(), null)
}
