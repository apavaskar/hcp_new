/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_BRAND
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_DIVISION
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_LOCATION
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_MONTH
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_YEAR
import com.squer.prorpel.jooq.indexes.IDX_LOC_BRAND_SS_YEARMONTH
import com.squer.prorpel.jooq.tables.records.DshConsolidatedLocationBrandSecondarySalesRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshConsolidatedLocationBrandSecondarySales(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DshConsolidatedLocationBrandSecondarySalesRecord>?,
    aliased: Table<DshConsolidatedLocationBrandSecondarySalesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DshConsolidatedLocationBrandSecondarySalesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.dsh_consolidated_location_brand_secondary_sales</code>
         */
        val DSH_CONSOLIDATED_LOCATION_BRAND_SECONDARY_SALES: DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DshConsolidatedLocationBrandSecondarySalesRecord> = DshConsolidatedLocationBrandSecondarySalesRecord::class.java

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.division_id</code>.
     */
    val DIVISION_ID: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.location_id</code>.
     */
    val LOCATION_ID: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.brand_id</code>.
     */
    val BRAND_ID: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, String?> = createField(DSL.name("brand_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.month</code>.
     */
    val MONTH: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.year</code>.
     */
    val YEAR: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.yearmonth</code>.
     */
    val YEARMONTH: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Int?> = createField(DSL.name("yearmonth"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.secondary_units</code>.
     */
    val SECONDARY_UNITS: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Int?> = createField(DSL.name("secondary_units"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.closing_units</code>.
     */
    val CLOSING_UNITS: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Int?> = createField(DSL.name("closing_units"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.secondary_value</code>.
     */
    val SECONDARY_VALUE: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Double?> = createField(DSL.name("secondary_value"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_brand_secondary_sales.closing_value</code>.
     */
    val CLOSING_VALUE: TableField<DshConsolidatedLocationBrandSecondarySalesRecord, Double?> = createField(DSL.name("closing_value"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationBrandSecondarySalesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationBrandSecondarySalesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>public.dsh_consolidated_location_brand_secondary_sales</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>public.dsh_consolidated_location_brand_secondary_sales</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>public.dsh_consolidated_location_brand_secondary_sales</code> table
     * reference
     */
    constructor(): this(DSL.name("dsh_consolidated_location_brand_secondary_sales"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DshConsolidatedLocationBrandSecondarySalesRecord>): this(Internal.createPathAlias(child, key), child, key, DSH_CONSOLIDATED_LOCATION_BRAND_SECONDARY_SALES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_LOC_BRAND_SS_BRAND, IDX_LOC_BRAND_SS_DIVISION, IDX_LOC_BRAND_SS_LOCATION, IDX_LOC_BRAND_SS_MONTH, IDX_LOC_BRAND_SS_YEAR, IDX_LOC_BRAND_SS_YEARMONTH)
    override fun `as`(alias: String): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(DSL.name(alias), this)
    override fun `as`(alias: Name): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(alias, this)
    override fun `as`(alias: Table<*>): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DshConsolidatedLocationBrandSecondarySales = DshConsolidatedLocationBrandSecondarySales(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Double?, Double?> = super.fieldsRow() as Row10<String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Double?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Double?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Double?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
