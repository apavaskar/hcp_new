/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.Labelmeta

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class LabelmetaRecord() : UpdatableRecordImpl<LabelmetaRecord>(Labelmeta.LABELMETA), Record4<Long?, String?, String?, Boolean?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var code: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var label: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsDefault")
    open var isDefault: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, String?, String?, Boolean?> = super.fieldsRow() as Row4<Long?, String?, String?, Boolean?>
    override fun valuesRow(): Row4<Long?, String?, String?, Boolean?> = super.valuesRow() as Row4<Long?, String?, String?, Boolean?>
    override fun field1(): Field<Long?> = Labelmeta.LABELMETA.ID
    override fun field2(): Field<String?> = Labelmeta.LABELMETA.CODE
    override fun field3(): Field<String?> = Labelmeta.LABELMETA.LABEL
    override fun field4(): Field<Boolean?> = Labelmeta.LABELMETA.IS_DEFAULT
    override fun component1(): Long? = id
    override fun component2(): String? = code
    override fun component3(): String? = label
    override fun component4(): Boolean? = isDefault
    override fun value1(): Long? = id
    override fun value2(): String? = code
    override fun value3(): String? = label
    override fun value4(): Boolean? = isDefault

    override fun value1(value: Long?): LabelmetaRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): LabelmetaRecord {
        this.code = value
        return this
    }

    override fun value3(value: String?): LabelmetaRecord {
        this.label = value
        return this
    }

    override fun value4(value: Boolean?): LabelmetaRecord {
        this.isDefault = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Boolean?): LabelmetaRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised LabelmetaRecord
     */
    constructor(id: Long? = null, code: String? = null, label: String? = null, isDefault: Boolean? = null): this() {
        this.id = id
        this.code = code
        this.label = label
        this.isDefault = isDefault
    }
}
