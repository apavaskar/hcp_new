/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.keys.FORMATTRIBUTEMETA_PKEY
import com.squer.prorpel.jooq.tables.records.FormattributemetaRecord

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Formattributemeta(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FormattributemetaRecord>?,
    aliased: Table<FormattributemetaRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FormattributemetaRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.formAttributeMeta</code>
         */
        val FORMATTRIBUTEMETA: Formattributemeta = Formattributemeta()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FormattributemetaRecord> = FormattributemetaRecord::class.java

    /**
     * The column <code>public.formAttributeMeta.id</code>.
     */
    val ID: TableField<FormattributemetaRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.formAttributeMeta.name</code>.
     */
    val NAME: TableField<FormattributemetaRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.formAttributeMeta.form_id</code>.
     */
    val FORM_ID: TableField<FormattributemetaRecord, Long?> = createField(DSL.name("form_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.formAttributeMeta.type</code>.
     */
    val TYPE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("type"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.formAttributeMeta.span</code>.
     */
    val SPAN: TableField<FormattributemetaRecord, Int?> = createField(DSL.name("span"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.formAttributeMeta.offset</code>.
     */
    val OFFSET: TableField<FormattributemetaRecord, Int?> = createField(DSL.name("offset"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.formAttributeMeta.display_order</code>.
     */
    val DISPLAY_ORDER: TableField<FormattributemetaRecord, Int?> = createField(DSL.name("display_order"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.formAttributeMeta.label</code>.
     */
    val LABEL: TableField<FormattributemetaRecord, String?> = createField(DSL.name("label"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.placeholder</code>.
     */
    val PLACEHOLDER: TableField<FormattributemetaRecord, String?> = createField(DSL.name("placeholder"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.action</code>.
     */
    val ACTION: TableField<FormattributemetaRecord, String?> = createField(DSL.name("action"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.on_select</code>.
     */
    val ON_SELECT: TableField<FormattributemetaRecord, String?> = createField(DSL.name("on_select"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.on_search</code>.
     */
    val ON_SEARCH: TableField<FormattributemetaRecord, String?> = createField(DSL.name("on_search"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.on_change</code>.
     */
    val ON_CHANGE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("on_change"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.default_value</code>.
     */
    val DEFAULT_VALUE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("default_value"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.data_type</code>.
     */
    val DATA_TYPE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("data_type"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.formAttributeMeta.is_required</code>.
     */
    val IS_REQUIRED: TableField<FormattributemetaRecord, Boolean?> = createField(DSL.name("is_required"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.formAttributeMeta.is_enabled</code>.
     */
    val IS_ENABLED: TableField<FormattributemetaRecord, Boolean?> = createField(DSL.name("is_enabled"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.formAttributeMeta.min_value</code>.
     */
    val MIN_VALUE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("min_value"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.max_value</code>.
     */
    val MAX_VALUE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("max_value"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.min_length</code>.
     */
    val MIN_LENGTH: TableField<FormattributemetaRecord, Int?> = createField(DSL.name("min_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.formAttributeMeta.max_length</code>.
     */
    val MAX_LENGTH: TableField<FormattributemetaRecord, Int?> = createField(DSL.name("max_length"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.formAttributeMeta.pattern</code>.
     */
    val PATTERN: TableField<FormattributemetaRecord, String?> = createField(DSL.name("pattern"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.message</code>.
     */
    val MESSAGE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("message"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.formAttributeMeta.reference</code>.
     */
    val REFERENCE: TableField<FormattributemetaRecord, String?> = createField(DSL.name("reference"), SQLDataType.VARCHAR(50), this, "")

    private constructor(alias: Name, aliased: Table<FormattributemetaRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FormattributemetaRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.formAttributeMeta</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.formAttributeMeta</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.formAttributeMeta</code> table reference
     */
    constructor(): this(DSL.name("formAttributeMeta"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FormattributemetaRecord>): this(Internal.createPathAlias(child, key), child, key, FORMATTRIBUTEMETA, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<FormattributemetaRecord, Long?> = super.getIdentity() as Identity<FormattributemetaRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<FormattributemetaRecord> = FORMATTRIBUTEMETA_PKEY
    override fun `as`(alias: String): Formattributemeta = Formattributemeta(DSL.name(alias), this)
    override fun `as`(alias: Name): Formattributemeta = Formattributemeta(alias, this)
    override fun `as`(alias: Table<*>): Formattributemeta = Formattributemeta(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Formattributemeta = Formattributemeta(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Formattributemeta = Formattributemeta(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Formattributemeta = Formattributemeta(name.getQualifiedName(), null)
}
