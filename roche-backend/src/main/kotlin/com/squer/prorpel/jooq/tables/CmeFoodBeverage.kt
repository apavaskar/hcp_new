/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.CmeFoodBeverageRecord

import java.time.OffsetDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CmeFoodBeverage(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CmeFoodBeverageRecord>?,
    aliased: Table<CmeFoodBeverageRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CmeFoodBeverageRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cme_food_beverage</code>
         */
        val CME_FOOD_BEVERAGE: CmeFoodBeverage = CmeFoodBeverage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CmeFoodBeverageRecord> = CmeFoodBeverageRecord::class.java

    /**
     * The column <code>public.cme_food_beverage.id</code>.
     */
    val ID: TableField<CmeFoodBeverageRecord, String?> = createField(DSL.name("id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_food_beverage.updated_by</code>.
     */
    val UPDATED_BY: TableField<CmeFoodBeverageRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_food_beverage.cost_per_head</code>.
     */
    val COST_PER_HEAD: TableField<CmeFoodBeverageRecord, Double?> = createField(DSL.name("cost_per_head"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.cme_food_beverage.created_by</code>.
     */
    val CREATED_BY: TableField<CmeFoodBeverageRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.cme_food_beverage.updated_on</code>.
     */
    val UPDATED_ON: TableField<CmeFoodBeverageRecord, OffsetDateTime?> = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_food_beverage.created_on</code>.
     */
    val CREATED_ON: TableField<CmeFoodBeverageRecord, OffsetDateTime?> = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.cme_food_beverage.no_of_attendees</code>.
     */
    val NO_OF_ATTENDEES: TableField<CmeFoodBeverageRecord, Int?> = createField(DSL.name("no_of_attendees"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cme_food_beverage.stale_id</code>.
     */
    val STALE_ID: TableField<CmeFoodBeverageRecord, String?> = createField(DSL.name("stale_id"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<CmeFoodBeverageRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CmeFoodBeverageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cme_food_beverage</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cme_food_beverage</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cme_food_beverage</code> table reference
     */
    constructor(): this(DSL.name("cme_food_beverage"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CmeFoodBeverageRecord>): this(Internal.createPathAlias(child, key), child, key, CME_FOOD_BEVERAGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): CmeFoodBeverage = CmeFoodBeverage(DSL.name(alias), this)
    override fun `as`(alias: Name): CmeFoodBeverage = CmeFoodBeverage(alias, this)
    override fun `as`(alias: Table<*>): CmeFoodBeverage = CmeFoodBeverage(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CmeFoodBeverage = CmeFoodBeverage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CmeFoodBeverage = CmeFoodBeverage(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CmeFoodBeverage = CmeFoodBeverage(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, Double?, String?, OffsetDateTime?, OffsetDateTime?, Int?, String?> = super.fieldsRow() as Row8<String?, String?, Double?, String?, OffsetDateTime?, OffsetDateTime?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Double?, String?, OffsetDateTime?, OffsetDateTime?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Double?, String?, OffsetDateTime?, OffsetDateTime?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
