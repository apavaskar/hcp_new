/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.FmkUserLov

import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class FmkUserLovRecord() : UpdatableRecordImpl<FmkUserLovRecord>(FmkUserLov.FMK_USER_LOV), Record11<String?, String?, OffsetDateTime?, Long?, Int?, String?, OffsetDateTime?, String?, Boolean?, String?, String?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var lovType: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var updatedOn: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    open var staleId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var displayOrder: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var ciName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var createdOn: OffsetDateTime?
        set(value): Unit = set(6, value)
        get(): OffsetDateTime? = get(6) as OffsetDateTime?

    open var id: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var display: Boolean?
        set(value): Unit = set(8, value)
        get(): Boolean? = get(8) as Boolean?

    open var updatedBy: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var createdBy: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<String?, String?, OffsetDateTime?, Long?, Int?, String?, OffsetDateTime?, String?, Boolean?, String?, String?> = super.fieldsRow() as Row11<String?, String?, OffsetDateTime?, Long?, Int?, String?, OffsetDateTime?, String?, Boolean?, String?, String?>
    override fun valuesRow(): Row11<String?, String?, OffsetDateTime?, Long?, Int?, String?, OffsetDateTime?, String?, Boolean?, String?, String?> = super.valuesRow() as Row11<String?, String?, OffsetDateTime?, Long?, Int?, String?, OffsetDateTime?, String?, Boolean?, String?, String?>
    override fun field1(): Field<String?> = FmkUserLov.FMK_USER_LOV.NAME
    override fun field2(): Field<String?> = FmkUserLov.FMK_USER_LOV.LOV_TYPE
    override fun field3(): Field<OffsetDateTime?> = FmkUserLov.FMK_USER_LOV.UPDATED_ON
    override fun field4(): Field<Long?> = FmkUserLov.FMK_USER_LOV.STALE_ID
    override fun field5(): Field<Int?> = FmkUserLov.FMK_USER_LOV.DISPLAY_ORDER
    override fun field6(): Field<String?> = FmkUserLov.FMK_USER_LOV.CI_NAME
    override fun field7(): Field<OffsetDateTime?> = FmkUserLov.FMK_USER_LOV.CREATED_ON
    override fun field8(): Field<String?> = FmkUserLov.FMK_USER_LOV.ID
    override fun field9(): Field<Boolean?> = FmkUserLov.FMK_USER_LOV.DISPLAY
    override fun field10(): Field<String?> = FmkUserLov.FMK_USER_LOV.UPDATED_BY
    override fun field11(): Field<String?> = FmkUserLov.FMK_USER_LOV.CREATED_BY
    override fun component1(): String? = name
    override fun component2(): String? = lovType
    override fun component3(): OffsetDateTime? = updatedOn
    override fun component4(): Long? = staleId
    override fun component5(): Int? = displayOrder
    override fun component6(): String? = ciName
    override fun component7(): OffsetDateTime? = createdOn
    override fun component8(): String? = id
    override fun component9(): Boolean? = display
    override fun component10(): String? = updatedBy
    override fun component11(): String? = createdBy
    override fun value1(): String? = name
    override fun value2(): String? = lovType
    override fun value3(): OffsetDateTime? = updatedOn
    override fun value4(): Long? = staleId
    override fun value5(): Int? = displayOrder
    override fun value6(): String? = ciName
    override fun value7(): OffsetDateTime? = createdOn
    override fun value8(): String? = id
    override fun value9(): Boolean? = display
    override fun value10(): String? = updatedBy
    override fun value11(): String? = createdBy

    override fun value1(value: String?): FmkUserLovRecord {
        this.name = value
        return this
    }

    override fun value2(value: String?): FmkUserLovRecord {
        this.lovType = value
        return this
    }

    override fun value3(value: OffsetDateTime?): FmkUserLovRecord {
        this.updatedOn = value
        return this
    }

    override fun value4(value: Long?): FmkUserLovRecord {
        this.staleId = value
        return this
    }

    override fun value5(value: Int?): FmkUserLovRecord {
        this.displayOrder = value
        return this
    }

    override fun value6(value: String?): FmkUserLovRecord {
        this.ciName = value
        return this
    }

    override fun value7(value: OffsetDateTime?): FmkUserLovRecord {
        this.createdOn = value
        return this
    }

    override fun value8(value: String?): FmkUserLovRecord {
        this.id = value
        return this
    }

    override fun value9(value: Boolean?): FmkUserLovRecord {
        this.display = value
        return this
    }

    override fun value10(value: String?): FmkUserLovRecord {
        this.updatedBy = value
        return this
    }

    override fun value11(value: String?): FmkUserLovRecord {
        this.createdBy = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: OffsetDateTime?, value4: Long?, value5: Int?, value6: String?, value7: OffsetDateTime?, value8: String?, value9: Boolean?, value10: String?, value11: String?): FmkUserLovRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised FmkUserLovRecord
     */
    constructor(name: String? = null, lovType: String? = null, updatedOn: OffsetDateTime? = null, staleId: Long? = null, displayOrder: Int? = null, ciName: String? = null, createdOn: OffsetDateTime? = null, id: String? = null, display: Boolean? = null, updatedBy: String? = null, createdBy: String? = null): this() {
        this.name = name
        this.lovType = lovType
        this.updatedOn = updatedOn
        this.staleId = staleId
        this.displayOrder = displayOrder
        this.ciName = ciName
        this.createdOn = createdOn
        this.id = id
        this.display = display
        this.updatedBy = updatedBy
        this.createdBy = createdBy
    }
}
