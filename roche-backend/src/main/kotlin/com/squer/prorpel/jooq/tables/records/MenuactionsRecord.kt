/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.Menuactions

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class MenuactionsRecord() : UpdatableRecordImpl<MenuactionsRecord>(Menuactions.MENUACTIONS), Record8<Long?, String?, String?, Int?, String?, Long?, String?, Long?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var ciName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var displayOrder: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var path: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var parentId: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var uiInterface: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var privilegeId: Long?
        set(value): Unit = set(7, value)
        get(): Long? = get(7) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, String?, String?, Int?, String?, Long?, String?, Long?> = super.fieldsRow() as Row8<Long?, String?, String?, Int?, String?, Long?, String?, Long?>
    override fun valuesRow(): Row8<Long?, String?, String?, Int?, String?, Long?, String?, Long?> = super.valuesRow() as Row8<Long?, String?, String?, Int?, String?, Long?, String?, Long?>
    override fun field1(): Field<Long?> = Menuactions.MENUACTIONS.ID
    override fun field2(): Field<String?> = Menuactions.MENUACTIONS.NAME
    override fun field3(): Field<String?> = Menuactions.MENUACTIONS.CI_NAME
    override fun field4(): Field<Int?> = Menuactions.MENUACTIONS.DISPLAY_ORDER
    override fun field5(): Field<String?> = Menuactions.MENUACTIONS.PATH
    override fun field6(): Field<Long?> = Menuactions.MENUACTIONS.PARENT_ID
    override fun field7(): Field<String?> = Menuactions.MENUACTIONS.UI_INTERFACE
    override fun field8(): Field<Long?> = Menuactions.MENUACTIONS.PRIVILEGE_ID
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): String? = ciName
    override fun component4(): Int? = displayOrder
    override fun component5(): String? = path
    override fun component6(): Long? = parentId
    override fun component7(): String? = uiInterface
    override fun component8(): Long? = privilegeId
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): String? = ciName
    override fun value4(): Int? = displayOrder
    override fun value5(): String? = path
    override fun value6(): Long? = parentId
    override fun value7(): String? = uiInterface
    override fun value8(): Long? = privilegeId

    override fun value1(value: Long?): MenuactionsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): MenuactionsRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): MenuactionsRecord {
        this.ciName = value
        return this
    }

    override fun value4(value: Int?): MenuactionsRecord {
        this.displayOrder = value
        return this
    }

    override fun value5(value: String?): MenuactionsRecord {
        this.path = value
        return this
    }

    override fun value6(value: Long?): MenuactionsRecord {
        this.parentId = value
        return this
    }

    override fun value7(value: String?): MenuactionsRecord {
        this.uiInterface = value
        return this
    }

    override fun value8(value: Long?): MenuactionsRecord {
        this.privilegeId = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Int?, value5: String?, value6: Long?, value7: String?, value8: Long?): MenuactionsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised MenuactionsRecord
     */
    constructor(id: Long? = null, name: String? = null, ciName: String? = null, displayOrder: Int? = null, path: String? = null, parentId: Long? = null, uiInterface: String? = null, privilegeId: Long? = null): this() {
        this.id = id
        this.name = name
        this.ciName = ciName
        this.displayOrder = displayOrder
        this.path = path
        this.parentId = parentId
        this.uiInterface = uiInterface
        this.privilegeId = privilegeId
    }
}
