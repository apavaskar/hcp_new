/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.TmpEmployeeUpload

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpEmployeeUploadRecord() : TableRecordImpl<TmpEmployeeUploadRecord>(TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD), Record6<String?, String?, String?, String?, Int?, String?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var employeeCode: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var division: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var divisionId: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var uploadError: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var uploadMessage: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<String?, String?, String?, String?, Int?, String?> = super.fieldsRow() as Row6<String?, String?, String?, String?, Int?, String?>
    override fun valuesRow(): Row6<String?, String?, String?, String?, Int?, String?> = super.valuesRow() as Row6<String?, String?, String?, String?, Int?, String?>
    override fun field1(): Field<String?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.NAME
    override fun field2(): Field<String?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.EMPLOYEE_CODE
    override fun field3(): Field<String?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.DIVISION
    override fun field4(): Field<String?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.DIVISION_ID
    override fun field5(): Field<Int?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.UPLOAD_ERROR
    override fun field6(): Field<String?> = TmpEmployeeUpload.TMP_EMPLOYEE_UPLOAD.UPLOAD_MESSAGE
    override fun component1(): String? = name
    override fun component2(): String? = employeeCode
    override fun component3(): String? = division
    override fun component4(): String? = divisionId
    override fun component5(): Int? = uploadError
    override fun component6(): String? = uploadMessage
    override fun value1(): String? = name
    override fun value2(): String? = employeeCode
    override fun value3(): String? = division
    override fun value4(): String? = divisionId
    override fun value5(): Int? = uploadError
    override fun value6(): String? = uploadMessage

    override fun value1(value: String?): TmpEmployeeUploadRecord {
        this.name = value
        return this
    }

    override fun value2(value: String?): TmpEmployeeUploadRecord {
        this.employeeCode = value
        return this
    }

    override fun value3(value: String?): TmpEmployeeUploadRecord {
        this.division = value
        return this
    }

    override fun value4(value: String?): TmpEmployeeUploadRecord {
        this.divisionId = value
        return this
    }

    override fun value5(value: Int?): TmpEmployeeUploadRecord {
        this.uploadError = value
        return this
    }

    override fun value6(value: String?): TmpEmployeeUploadRecord {
        this.uploadMessage = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: Int?, value6: String?): TmpEmployeeUploadRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised TmpEmployeeUploadRecord
     */
    constructor(name: String? = null, employeeCode: String? = null, division: String? = null, divisionId: String? = null, uploadError: Int? = null, uploadMessage: String? = null): this() {
        this.name = name
        this.employeeCode = employeeCode
        this.division = division
        this.divisionId = divisionId
        this.uploadError = uploadError
        this.uploadMessage = uploadMessage
    }
}
