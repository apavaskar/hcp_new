/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.FmkCounter

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class FmkCounterRecord() : UpdatableRecordImpl<FmkCounterRecord>(FmkCounter.FMK_COUNTER), Record3<Int?, String?, String?> {

    open var count: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var id: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var ownerId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
    override fun valuesRow(): Row3<Int?, String?, String?> = super.valuesRow() as Row3<Int?, String?, String?>
    override fun field1(): Field<Int?> = FmkCounter.FMK_COUNTER.COUNT
    override fun field2(): Field<String?> = FmkCounter.FMK_COUNTER.ID
    override fun field3(): Field<String?> = FmkCounter.FMK_COUNTER.OWNER_ID
    override fun component1(): Int? = count
    override fun component2(): String? = id
    override fun component3(): String? = ownerId
    override fun value1(): Int? = count
    override fun value2(): String? = id
    override fun value3(): String? = ownerId

    override fun value1(value: Int?): FmkCounterRecord {
        this.count = value
        return this
    }

    override fun value2(value: String?): FmkCounterRecord {
        this.id = value
        return this
    }

    override fun value3(value: String?): FmkCounterRecord {
        this.ownerId = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?): FmkCounterRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised FmkCounterRecord
     */
    constructor(count: Int? = null, id: String? = null, ownerId: String? = null): this() {
        this.count = count
        this.id = id
        this.ownerId = ownerId
    }
}
