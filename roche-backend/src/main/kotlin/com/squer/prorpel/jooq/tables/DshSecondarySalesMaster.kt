/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.keys.DSH_SECONDARY_SALES_MASTER_PKEY
import com.squer.prorpel.jooq.tables.records.DshSecondarySalesMasterRecord

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row15
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshSecondarySalesMaster(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DshSecondarySalesMasterRecord>?,
    aliased: Table<DshSecondarySalesMasterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DshSecondarySalesMasterRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.dsh_secondary_sales_master</code>
         */
        val DSH_SECONDARY_SALES_MASTER: DshSecondarySalesMaster = DshSecondarySalesMaster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DshSecondarySalesMasterRecord> = DshSecondarySalesMasterRecord::class.java

    /**
     * The column <code>public.dsh_secondary_sales_master.id</code>.
     */
    val ID: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("id"), SQLDataType.CHAR(37).nullable(false), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.created_by</code>.
     */
    val CREATED_BY: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.primary_sale</code>.
     */
    val PRIMARY_SALE: TableField<DshSecondarySalesMasterRecord, Double?> = createField(DSL.name("primary_sale"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.to_date</code>.
     */
    val TO_DATE: TableField<DshSecondarySalesMasterRecord, LocalDate?> = createField(DSL.name("to_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.stale_id</code>.
     */
    val STALE_ID: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("stale_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.sales_year</code>.
     */
    val SALES_YEAR: TableField<DshSecondarySalesMasterRecord, Int?> = createField(DSL.name("sales_year"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.updated_by</code>.
     */
    val UPDATED_BY: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.status_id</code>.
     */
    val STATUS_ID: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("status_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.stockist_id</code>.
     */
    val STOCKIST_ID: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("stockist_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.secondary_sale</code>.
     */
    val SECONDARY_SALE: TableField<DshSecondarySalesMasterRecord, Double?> = createField(DSL.name("secondary_sale"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.updated_on</code>.
     */
    val UPDATED_ON: TableField<DshSecondarySalesMasterRecord, OffsetDateTime?> = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.from_date</code>.
     */
    val FROM_DATE: TableField<DshSecondarySalesMasterRecord, LocalDate?> = createField(DSL.name("from_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.division_id</code>.
     */
    val DIVISION_ID: TableField<DshSecondarySalesMasterRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.created_on</code>.
     */
    val CREATED_ON: TableField<DshSecondarySalesMasterRecord, OffsetDateTime?> = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dsh_secondary_sales_master.sales_month</code>.
     */
    val SALES_MONTH: TableField<DshSecondarySalesMasterRecord, Int?> = createField(DSL.name("sales_month"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<DshSecondarySalesMasterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DshSecondarySalesMasterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dsh_secondary_sales_master</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dsh_secondary_sales_master</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dsh_secondary_sales_master</code> table reference
     */
    constructor(): this(DSL.name("dsh_secondary_sales_master"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DshSecondarySalesMasterRecord>): this(Internal.createPathAlias(child, key), child, key, DSH_SECONDARY_SALES_MASTER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<DshSecondarySalesMasterRecord> = DSH_SECONDARY_SALES_MASTER_PKEY
    override fun `as`(alias: String): DshSecondarySalesMaster = DshSecondarySalesMaster(DSL.name(alias), this)
    override fun `as`(alias: Name): DshSecondarySalesMaster = DshSecondarySalesMaster(alias, this)
    override fun `as`(alias: Table<*>): DshSecondarySalesMaster = DshSecondarySalesMaster(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DshSecondarySalesMaster = DshSecondarySalesMaster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DshSecondarySalesMaster = DshSecondarySalesMaster(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DshSecondarySalesMaster = DshSecondarySalesMaster(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<String?, String?, Double?, LocalDate?, String?, Int?, String?, String?, String?, Double?, OffsetDateTime?, LocalDate?, String?, OffsetDateTime?, Int?> = super.fieldsRow() as Row15<String?, String?, Double?, LocalDate?, String?, Int?, String?, String?, String?, Double?, OffsetDateTime?, LocalDate?, String?, OffsetDateTime?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Double?, LocalDate?, String?, Int?, String?, String?, String?, Double?, OffsetDateTime?, LocalDate?, String?, OffsetDateTime?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Double?, LocalDate?, String?, Int?, String?, String?, String?, Double?, OffsetDateTime?, LocalDate?, String?, OffsetDateTime?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
