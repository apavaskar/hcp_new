/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.keys.BATCH_STEP_EXECUTION_PKEY
import com.squer.prorpel.jooq.keys.BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK
import com.squer.prorpel.jooq.tables.records.BatchStepExecutionRecord

import java.time.LocalDateTime
import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row18
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BatchStepExecution(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BatchStepExecutionRecord>?,
    aliased: Table<BatchStepExecutionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BatchStepExecutionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.batch_step_execution</code>
         */
        val BATCH_STEP_EXECUTION: BatchStepExecution = BatchStepExecution()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BatchStepExecutionRecord> = BatchStepExecutionRecord::class.java

    /**
     * The column <code>public.batch_step_execution.step_execution_id</code>.
     */
    val STEP_EXECUTION_ID: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("step_execution_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.batch_step_execution.version</code>.
     */
    val VERSION: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.batch_step_execution.step_name</code>.
     */
    val STEP_NAME: TableField<BatchStepExecutionRecord, String?> = createField(DSL.name("step_name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.batch_step_execution.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.batch_step_execution.start_time</code>.
     */
    val START_TIME: TableField<BatchStepExecutionRecord, LocalDateTime?> = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.batch_step_execution.end_time</code>.
     */
    val END_TIME: TableField<BatchStepExecutionRecord, LocalDateTime?> = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.batch_step_execution.status</code>.
     */
    val STATUS: TableField<BatchStepExecutionRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>public.batch_step_execution.commit_count</code>.
     */
    val COMMIT_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("commit_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.read_count</code>.
     */
    val READ_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("read_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.filter_count</code>.
     */
    val FILTER_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("filter_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.write_count</code>.
     */
    val WRITE_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("write_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.read_skip_count</code>.
     */
    val READ_SKIP_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("read_skip_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.write_skip_count</code>.
     */
    val WRITE_SKIP_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("write_skip_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.process_skip_count</code>.
     */
    val PROCESS_SKIP_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("process_skip_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.rollback_count</code>.
     */
    val ROLLBACK_COUNT: TableField<BatchStepExecutionRecord, Long?> = createField(DSL.name("rollback_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.batch_step_execution.exit_code</code>.
     */
    val EXIT_CODE: TableField<BatchStepExecutionRecord, String?> = createField(DSL.name("exit_code"), SQLDataType.VARCHAR(2500), this, "")

    /**
     * The column <code>public.batch_step_execution.exit_message</code>.
     */
    val EXIT_MESSAGE: TableField<BatchStepExecutionRecord, String?> = createField(DSL.name("exit_message"), SQLDataType.VARCHAR(2500), this, "")

    /**
     * The column <code>public.batch_step_execution.last_updated</code>.
     */
    val LAST_UPDATED: TableField<BatchStepExecutionRecord, LocalDateTime?> = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<BatchStepExecutionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BatchStepExecutionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.batch_step_execution</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.batch_step_execution</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.batch_step_execution</code> table reference
     */
    constructor(): this(DSL.name("batch_step_execution"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BatchStepExecutionRecord>): this(Internal.createPathAlias(child, key), child, key, BATCH_STEP_EXECUTION, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BatchStepExecutionRecord> = BATCH_STEP_EXECUTION_PKEY
    override fun getReferences(): List<ForeignKey<BatchStepExecutionRecord, *>> = listOf(BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK)

    private lateinit var _batchJobExecution: BatchJobExecution

    /**
     * Get the implicit join path to the <code>public.batch_job_execution</code>
     * table.
     */
    fun batchJobExecution(): BatchJobExecution {
        if (!this::_batchJobExecution.isInitialized)
            _batchJobExecution = BatchJobExecution(this, BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK)

        return _batchJobExecution;
    }

    val batchJobExecution: BatchJobExecution
        get(): BatchJobExecution = batchJobExecution()
    override fun `as`(alias: String): BatchStepExecution = BatchStepExecution(DSL.name(alias), this)
    override fun `as`(alias: Name): BatchStepExecution = BatchStepExecution(alias, this)
    override fun `as`(alias: Table<*>): BatchStepExecution = BatchStepExecution(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BatchStepExecution = BatchStepExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BatchStepExecution = BatchStepExecution(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BatchStepExecution = BatchStepExecution(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row18<Long?, Long?, String?, Long?, LocalDateTime?, LocalDateTime?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row18<Long?, Long?, String?, Long?, LocalDateTime?, LocalDateTime?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, Long?, LocalDateTime?, LocalDateTime?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, Long?, LocalDateTime?, LocalDateTime?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
