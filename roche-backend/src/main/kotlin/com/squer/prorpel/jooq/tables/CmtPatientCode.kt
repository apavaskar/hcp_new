/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.tables.records.CmtPatientCodeRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CmtPatientCode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CmtPatientCodeRecord>?,
    aliased: Table<CmtPatientCodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CmtPatientCodeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cmt_patient_code</code>
         */
        val CMT_PATIENT_CODE: CmtPatientCode = CmtPatientCode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CmtPatientCodeRecord> = CmtPatientCodeRecord::class.java

    /**
     * The column <code>public.cmt_patient_code.id</code>.
     */
    val ID: TableField<CmtPatientCodeRecord, Short?> = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.cmt_patient_code.patient_id</code>.
     */
    val PATIENT_ID: TableField<CmtPatientCodeRecord, String?> = createField(DSL.name("patient_id"), SQLDataType.CHAR(37), this, "")

    private constructor(alias: Name, aliased: Table<CmtPatientCodeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CmtPatientCodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cmt_patient_code</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cmt_patient_code</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cmt_patient_code</code> table reference
     */
    constructor(): this(DSL.name("cmt_patient_code"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CmtPatientCodeRecord>): this(Internal.createPathAlias(child, key), child, key, CMT_PATIENT_CODE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<CmtPatientCodeRecord, Short?> = super.getIdentity() as Identity<CmtPatientCodeRecord, Short?>
    override fun `as`(alias: String): CmtPatientCode = CmtPatientCode(DSL.name(alias), this)
    override fun `as`(alias: Name): CmtPatientCode = CmtPatientCode(alias, this)
    override fun `as`(alias: Table<*>): CmtPatientCode = CmtPatientCode(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CmtPatientCode = CmtPatientCode(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CmtPatientCode = CmtPatientCode(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CmtPatientCode = CmtPatientCode(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Short?, String?> = super.fieldsRow() as Row2<Short?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Short?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Short?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
