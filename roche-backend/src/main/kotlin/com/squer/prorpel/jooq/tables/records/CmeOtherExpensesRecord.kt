/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables.records


import com.squer.prorpel.jooq.tables.CmeOtherExpenses

import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CmeOtherExpensesRecord() : TableRecordImpl<CmeOtherExpensesRecord>(CmeOtherExpenses.CME_OTHER_EXPENSES), Record11<Double?, String?, Double?, String?, String?, Double?, Double?, OffsetDateTime?, OffsetDateTime?, String?, String?> {

    open var registerationFees: Double?
        set(value): Unit = set(0, value)
        get(): Double? = get(0) as Double?

    open var id: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var localConveyance: Double?
        set(value): Unit = set(2, value)
        get(): Double? = get(2) as Double?

    open var updatedBy: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var createdBy: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var consultancyFees: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var others: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var updatedOn: OffsetDateTime?
        set(value): Unit = set(7, value)
        get(): OffsetDateTime? = get(7) as OffsetDateTime?

    open var createdOn: OffsetDateTime?
        set(value): Unit = set(8, value)
        get(): OffsetDateTime? = get(8) as OffsetDateTime?

    open var comment: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var staleId: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<Double?, String?, Double?, String?, String?, Double?, Double?, OffsetDateTime?, OffsetDateTime?, String?, String?> = super.fieldsRow() as Row11<Double?, String?, Double?, String?, String?, Double?, Double?, OffsetDateTime?, OffsetDateTime?, String?, String?>
    override fun valuesRow(): Row11<Double?, String?, Double?, String?, String?, Double?, Double?, OffsetDateTime?, OffsetDateTime?, String?, String?> = super.valuesRow() as Row11<Double?, String?, Double?, String?, String?, Double?, Double?, OffsetDateTime?, OffsetDateTime?, String?, String?>
    override fun field1(): Field<Double?> = CmeOtherExpenses.CME_OTHER_EXPENSES.REGISTERATION_FEES
    override fun field2(): Field<String?> = CmeOtherExpenses.CME_OTHER_EXPENSES.ID
    override fun field3(): Field<Double?> = CmeOtherExpenses.CME_OTHER_EXPENSES.LOCAL_CONVEYANCE
    override fun field4(): Field<String?> = CmeOtherExpenses.CME_OTHER_EXPENSES.UPDATED_BY
    override fun field5(): Field<String?> = CmeOtherExpenses.CME_OTHER_EXPENSES.CREATED_BY
    override fun field6(): Field<Double?> = CmeOtherExpenses.CME_OTHER_EXPENSES.CONSULTANCY_FEES
    override fun field7(): Field<Double?> = CmeOtherExpenses.CME_OTHER_EXPENSES.OTHERS
    override fun field8(): Field<OffsetDateTime?> = CmeOtherExpenses.CME_OTHER_EXPENSES.UPDATED_ON
    override fun field9(): Field<OffsetDateTime?> = CmeOtherExpenses.CME_OTHER_EXPENSES.CREATED_ON
    override fun field10(): Field<String?> = CmeOtherExpenses.CME_OTHER_EXPENSES.COMMENT
    override fun field11(): Field<String?> = CmeOtherExpenses.CME_OTHER_EXPENSES.STALE_ID
    override fun component1(): Double? = registerationFees
    override fun component2(): String? = id
    override fun component3(): Double? = localConveyance
    override fun component4(): String? = updatedBy
    override fun component5(): String? = createdBy
    override fun component6(): Double? = consultancyFees
    override fun component7(): Double? = others
    override fun component8(): OffsetDateTime? = updatedOn
    override fun component9(): OffsetDateTime? = createdOn
    override fun component10(): String? = comment
    override fun component11(): String? = staleId
    override fun value1(): Double? = registerationFees
    override fun value2(): String? = id
    override fun value3(): Double? = localConveyance
    override fun value4(): String? = updatedBy
    override fun value5(): String? = createdBy
    override fun value6(): Double? = consultancyFees
    override fun value7(): Double? = others
    override fun value8(): OffsetDateTime? = updatedOn
    override fun value9(): OffsetDateTime? = createdOn
    override fun value10(): String? = comment
    override fun value11(): String? = staleId

    override fun value1(value: Double?): CmeOtherExpensesRecord {
        this.registerationFees = value
        return this
    }

    override fun value2(value: String?): CmeOtherExpensesRecord {
        this.id = value
        return this
    }

    override fun value3(value: Double?): CmeOtherExpensesRecord {
        this.localConveyance = value
        return this
    }

    override fun value4(value: String?): CmeOtherExpensesRecord {
        this.updatedBy = value
        return this
    }

    override fun value5(value: String?): CmeOtherExpensesRecord {
        this.createdBy = value
        return this
    }

    override fun value6(value: Double?): CmeOtherExpensesRecord {
        this.consultancyFees = value
        return this
    }

    override fun value7(value: Double?): CmeOtherExpensesRecord {
        this.others = value
        return this
    }

    override fun value8(value: OffsetDateTime?): CmeOtherExpensesRecord {
        this.updatedOn = value
        return this
    }

    override fun value9(value: OffsetDateTime?): CmeOtherExpensesRecord {
        this.createdOn = value
        return this
    }

    override fun value10(value: String?): CmeOtherExpensesRecord {
        this.comment = value
        return this
    }

    override fun value11(value: String?): CmeOtherExpensesRecord {
        this.staleId = value
        return this
    }

    override fun values(value1: Double?, value2: String?, value3: Double?, value4: String?, value5: String?, value6: Double?, value7: Double?, value8: OffsetDateTime?, value9: OffsetDateTime?, value10: String?, value11: String?): CmeOtherExpensesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised CmeOtherExpensesRecord
     */
    constructor(registerationFees: Double? = null, id: String? = null, localConveyance: Double? = null, updatedBy: String? = null, createdBy: String? = null, consultancyFees: Double? = null, others: Double? = null, updatedOn: OffsetDateTime? = null, createdOn: OffsetDateTime? = null, comment: String? = null, staleId: String? = null): this() {
        this.registerationFees = registerationFees
        this.id = id
        this.localConveyance = localConveyance
        this.updatedBy = updatedBy
        this.createdBy = createdBy
        this.consultancyFees = consultancyFees
        this.others = others
        this.updatedOn = updatedOn
        this.createdOn = createdOn
        this.comment = comment
        this.staleId = staleId
    }
}
