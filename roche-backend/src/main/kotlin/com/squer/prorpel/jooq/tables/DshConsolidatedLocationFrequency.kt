/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.DSH_CONSOLIDATED_LOCATION_FREQUENCY_DIVISION_ID_INDEX
import com.squer.prorpel.jooq.indexes.DSH_CONSOLIDATED_LOCATION_FREQUENCY_LOCATION_ID_INDEX
import com.squer.prorpel.jooq.indexes.DSH_CONSOLIDATED_LOCATION_FREQUENCY_YEARMONTH_INDEX
import com.squer.prorpel.jooq.tables.records.DshConsolidatedLocationFrequencyRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DshConsolidatedLocationFrequency(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DshConsolidatedLocationFrequencyRecord>?,
    aliased: Table<DshConsolidatedLocationFrequencyRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DshConsolidatedLocationFrequencyRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.dsh_consolidated_location_frequency</code>
         */
        val DSH_CONSOLIDATED_LOCATION_FREQUENCY: DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DshConsolidatedLocationFrequencyRecord> = DshConsolidatedLocationFrequencyRecord::class.java

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.division_id</code>.
     */
    val DIVISION_ID: TableField<DshConsolidatedLocationFrequencyRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.location_id</code>.
     */
    val LOCATION_ID: TableField<DshConsolidatedLocationFrequencyRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.dsh_consolidated_location_frequency.month</code>.
     */
    val MONTH: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("month"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dsh_consolidated_location_frequency.year</code>.
     */
    val YEAR: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("year"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.yearmonth</code>.
     */
    val YEARMONTH: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("yearmonth"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.a_frequency</code>.
     */
    val A_FREQUENCY: TableField<DshConsolidatedLocationFrequencyRecord, Double?> = createField(DSL.name("a_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.b_frequency</code>.
     */
    val B_FREQUENCY: TableField<DshConsolidatedLocationFrequencyRecord, Double?> = createField(DSL.name("b_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.c_frequency</code>.
     */
    val C_FREQUENCY: TableField<DshConsolidatedLocationFrequencyRecord, Double?> = createField(DSL.name("c_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.call_average</code>.
     */
    val CALL_AVERAGE: TableField<DshConsolidatedLocationFrequencyRecord, Double?> = createField(DSL.name("call_average"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.field_days</code>.
     */
    val FIELD_DAYS: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("field_days"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.total_doctors</code>.
     */
    val TOTAL_DOCTORS: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("total_doctors"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.total_doctor_visit</code>.
     */
    val TOTAL_DOCTOR_VISIT: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("total_doctor_visit"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.total_frequency</code>.
     */
    val TOTAL_FREQUENCY: TableField<DshConsolidatedLocationFrequencyRecord, Double?> = createField(DSL.name("total_frequency"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.a_frequency_met</code>.
     */
    val A_FREQUENCY_MET: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("a_frequency_met"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.b_frequency_met</code>.
     */
    val B_FREQUENCY_MET: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("b_frequency_met"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>public.dsh_consolidated_location_frequency.c_frequency_met</code>.
     */
    val C_FREQUENCY_MET: TableField<DshConsolidatedLocationFrequencyRecord, Int?> = createField(DSL.name("c_frequency_met"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationFrequencyRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DshConsolidatedLocationFrequencyRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dsh_consolidated_location_frequency</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dsh_consolidated_location_frequency</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dsh_consolidated_location_frequency</code> table
     * reference
     */
    constructor(): this(DSL.name("dsh_consolidated_location_frequency"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DshConsolidatedLocationFrequencyRecord>): this(Internal.createPathAlias(child, key), child, key, DSH_CONSOLIDATED_LOCATION_FREQUENCY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(DSH_CONSOLIDATED_LOCATION_FREQUENCY_DIVISION_ID_INDEX, DSH_CONSOLIDATED_LOCATION_FREQUENCY_LOCATION_ID_INDEX, DSH_CONSOLIDATED_LOCATION_FREQUENCY_YEARMONTH_INDEX)
    override fun `as`(alias: String): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(DSL.name(alias), this)
    override fun `as`(alias: Name): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(alias, this)
    override fun `as`(alias: Table<*>): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DshConsolidatedLocationFrequency = DshConsolidatedLocationFrequency(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Int?, Int?, Int?, Double?, Int?, Int?, Int?> = super.fieldsRow() as Row16<String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Int?, Int?, Int?, Double?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Int?, Int?, Int?, Double?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Int?, Int?, Int?, Double?, Double?, Double?, Double?, Int?, Int?, Int?, Double?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
