/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.TMP_EFFORT_UPLOAD_CUSTOMER_ID_IDX
import com.squer.prorpel.jooq.indexes.TMP_EFFORT_UPLOAD_JOB_EXECUTION_ID_IDX
import com.squer.prorpel.jooq.indexes.TMP_EFFORT_UPLOAD_LOCATION_ID_IDX
import com.squer.prorpel.jooq.tables.records.TmpEffortUploadRecord

import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row19
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TmpEffortUpload(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TmpEffortUploadRecord>?,
    aliased: Table<TmpEffortUploadRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TmpEffortUploadRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.tmp_effort_upload</code>
         */
        val TMP_EFFORT_UPLOAD: TmpEffortUpload = TmpEffortUpload()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TmpEffortUploadRecord> = TmpEffortUploadRecord::class.java

    /**
     * The column <code>public.tmp_effort_upload.id</code>.
     */
    val ID: TableField<TmpEffortUploadRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_effort_upload.assigned_alias</code>.
     */
    val ASSIGNED_ALIAS: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("assigned_alias"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.account_owner</code>.
     */
    val ACCOUNT_OWNER: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("account_owner"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.account_id</code>.
     */
    val ACCOUNT_ID: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("account_id"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.account_name</code>.
     */
    val ACCOUNT_NAME: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("account_name"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.status</code>.
     */
    val STATUS: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.date_1</code>.
     */
    val DATE_1: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("date_1"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.tmp_effort_upload.due_time</code>.
     */
    val DUE_TIME: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("due_time"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.end_date</code>.
     */
    val END_DATE: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("end_date"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.tmp_effort_upload.last_modified_date</code>.
     */
    val LAST_MODIFIED_DATE: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("last_modified_date"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.tmp_effort_upload.counts_against_target</code>.
     */
    val COUNTS_AGAINST_TARGET: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("counts_against_target"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.tmp_effort_upload.employee_id</code>.
     */
    val EMPLOYEE_ID: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("employee_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_effort_upload.location_id</code>.
     */
    val LOCATION_ID: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("location_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_effort_upload.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("customer_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.tmp_effort_upload.customer_classification</code>.
     */
    val CUSTOMER_CLASSIFICATION: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("customer_classification"), SQLDataType.CHAR(1), this, "")

    /**
     * The column <code>public.tmp_effort_upload.job_execution_id</code>.
     */
    val JOB_EXECUTION_ID: TableField<TmpEffortUploadRecord, Long?> = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.tmp_effort_upload.yyyymm_date1</code>.
     */
    val YYYYMM_DATE1: TableField<TmpEffortUploadRecord, Int?> = createField(DSL.name("yyyymm_date1"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.tmp_effort_upload.error_message</code>.
     */
    val ERROR_MESSAGE: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("error_message"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.tmp_effort_upload.customer_type</code>.
     */
    val CUSTOMER_TYPE: TableField<TmpEffortUploadRecord, String?> = createField(DSL.name("customer_type"), SQLDataType.CHAR(1), this, "")

    private constructor(alias: Name, aliased: Table<TmpEffortUploadRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TmpEffortUploadRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tmp_effort_upload</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tmp_effort_upload</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tmp_effort_upload</code> table reference
     */
    constructor(): this(DSL.name("tmp_effort_upload"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TmpEffortUploadRecord>): this(Internal.createPathAlias(child, key), child, key, TMP_EFFORT_UPLOAD, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(TMP_EFFORT_UPLOAD_CUSTOMER_ID_IDX, TMP_EFFORT_UPLOAD_JOB_EXECUTION_ID_IDX, TMP_EFFORT_UPLOAD_LOCATION_ID_IDX)
    override fun `as`(alias: String): TmpEffortUpload = TmpEffortUpload(DSL.name(alias), this)
    override fun `as`(alias: Name): TmpEffortUpload = TmpEffortUpload(alias, this)
    override fun `as`(alias: Table<*>): TmpEffortUpload = TmpEffortUpload(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TmpEffortUpload = TmpEffortUpload(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TmpEffortUpload = TmpEffortUpload(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TmpEffortUpload = TmpEffortUpload(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row19<Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Long?, Int?, String?, String?> = super.fieldsRow() as Row19<Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Long?, Int?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Long?, Int?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Long?, Int?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
