/*
 * This file is generated by jOOQ.
 */
package com.squer.prorpel.jooq.tables


import com.squer.prorpel.jooq.Public
import com.squer.prorpel.jooq.indexes.RPT_SALES_TARGET_DATA_DIVISION
import com.squer.prorpel.jooq.indexes.RPT_SALES_TARGET_DATA_LOCATION
import com.squer.prorpel.jooq.indexes.RPT_SALES_TARGET_DATA_MONTH
import com.squer.prorpel.jooq.indexes.RPT_SALES_TARGET_DATA_SKU
import com.squer.prorpel.jooq.indexes.RPT_SALES_TARGET_DATA_YEAR
import com.squer.prorpel.jooq.keys.RPT_SALES_TARGET_DATA_PKEY
import com.squer.prorpel.jooq.tables.records.RptSalesTargetDataRecord

import java.time.LocalDate
import java.util.function.Function

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row12
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class RptSalesTargetData(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RptSalesTargetDataRecord>?,
    aliased: Table<RptSalesTargetDataRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RptSalesTargetDataRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.rpt_sales_target_data</code>
         */
        val RPT_SALES_TARGET_DATA: RptSalesTargetData = RptSalesTargetData()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RptSalesTargetDataRecord> = RptSalesTargetDataRecord::class.java

    /**
     * The column <code>public.rpt_sales_target_data.id</code>.
     */
    val ID: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(123).nullable(false), this, "")

    /**
     * The column <code>public.rpt_sales_target_data.target_month</code>.
     */
    val TARGET_MONTH: TableField<RptSalesTargetDataRecord, Int?> = createField(DSL.name("target_month"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.target_year</code>.
     */
    val TARGET_YEAR: TableField<RptSalesTargetDataRecord, Int?> = createField(DSL.name("target_year"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.division_id</code>.
     */
    val DIVISION_ID: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("division_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.rpt_sales_target_data.sku_id</code>.
     */
    val SKU_ID: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("sku_id"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.rpt_sales_target_data.location</code>.
     */
    val LOCATION: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("location"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.rpt_sales_target_data.target_value</code>.
     */
    val TARGET_VALUE: TableField<RptSalesTargetDataRecord, Double?> = createField(DSL.name("target_value"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.target_units</code>.
     */
    val TARGET_UNITS: TableField<RptSalesTargetDataRecord, Double?> = createField(DSL.name("target_units"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.created_on</code>.
     */
    val CREATED_ON: TableField<RptSalesTargetDataRecord, LocalDate?> = createField(DSL.name("created_on"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.updated_on</code>.
     */
    val UPDATED_ON: TableField<RptSalesTargetDataRecord, LocalDate?> = createField(DSL.name("updated_on"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.rpt_sales_target_data.created_by</code>.
     */
    val CREATED_BY: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CHAR(37), this, "")

    /**
     * The column <code>public.rpt_sales_target_data.updated_by</code>.
     */
    val UPDATED_BY: TableField<RptSalesTargetDataRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.CHAR(37), this, "")

    private constructor(alias: Name, aliased: Table<RptSalesTargetDataRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RptSalesTargetDataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.rpt_sales_target_data</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.rpt_sales_target_data</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.rpt_sales_target_data</code> table reference
     */
    constructor(): this(DSL.name("rpt_sales_target_data"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RptSalesTargetDataRecord>): this(Internal.createPathAlias(child, key), child, key, RPT_SALES_TARGET_DATA, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(RPT_SALES_TARGET_DATA_DIVISION, RPT_SALES_TARGET_DATA_LOCATION, RPT_SALES_TARGET_DATA_MONTH, RPT_SALES_TARGET_DATA_SKU, RPT_SALES_TARGET_DATA_YEAR)
    override fun getPrimaryKey(): UniqueKey<RptSalesTargetDataRecord> = RPT_SALES_TARGET_DATA_PKEY
    override fun `as`(alias: String): RptSalesTargetData = RptSalesTargetData(DSL.name(alias), this)
    override fun `as`(alias: Name): RptSalesTargetData = RptSalesTargetData(alias, this)
    override fun `as`(alias: Table<*>): RptSalesTargetData = RptSalesTargetData(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RptSalesTargetData = RptSalesTargetData(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RptSalesTargetData = RptSalesTargetData(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RptSalesTargetData = RptSalesTargetData(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row12<String?, Int?, Int?, String?, String?, String?, Double?, Double?, LocalDate?, LocalDate?, String?, String?> = super.fieldsRow() as Row12<String?, Int?, Int?, String?, String?, String?, Double?, Double?, LocalDate?, LocalDate?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, Int?, Int?, String?, String?, String?, Double?, Double?, LocalDate?, LocalDate?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, Int?, Int?, String?, String?, String?, Double?, Double?, LocalDate?, LocalDate?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
